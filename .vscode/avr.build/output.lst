
.vscode/avr.build/output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	15 c1       	rjmp	.+554    	; 0x22e <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	99 c0       	rjmp	.+306    	; 0x14a <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	fb c0       	rjmp	.+502    	; 0x21a <__vector_17>
  24:	67 c0       	rjmp	.+206    	; 0xf4 <__vector_18>
  26:	3c c0       	rjmp	.+120    	; 0xa0 <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
__trampolines_start():
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
__do_copy_data():
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e5       	ldi	r30, 0x54	; 84
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 31       	cpi	r26, 0x1C	; 28
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
__do_clear_bss():
  56:	23 e0       	ldi	r18, 0x03	; 3
  58:	ac e1       	ldi	r26, 0x1C	; 28
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 30       	cpi	r26, 0x02	; 2
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
.do_clear_bss_start():
  66:	33 d1       	rcall	.+614    	; 0x2ce <main>
  68:	73 c2       	rjmp	.+1254   	; 0x550 <_exit>

0000006a <__bad_interrupt>:
__vector_22():
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <STATE_error__entering_handler()>:
_Z29STATE_error__entering_handlerv():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:284

//----------------------------------------------------------
// STATE ENTRY FUNCTIONS
//---------------------------------------------------------
void STATE_error__entering_handler(void)
{	
  6c:	08 95       	ret

0000006e <STATE_transmit__entering_handler()>:
_Z32STATE_transmit__entering_handlerv():
  6e:	08 95       	ret

00000070 <STATE_receive__entering_handler()>:
_Z31STATE_receive__entering_handlerv():
  70:	08 95       	ret

00000072 <STATE_init__entering_handler()>:
_Z28STATE_init__entering_handlerv():
  72:	08 95       	ret

00000074 <STATE_start__entering_handler()>:
_Z29STATE_start__entering_handlerv():
  74:	08 95       	ret

00000076 <STATE_transmit__handler(Events_t)>:
_Z23STATE_transmit__handler8Events_t():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:277
	}

	*/
	
	return ret_state;
}	
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	08 95       	ret

0000007c <STATE_receive__handler(Events_t)>:
_Z22STATE_receive__handler8Events_t():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:170
			break;
	}
	*/
	
	return ret_state;
}	
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	08 95       	ret

00000082 <STATE_init__handler(Events_t)>:
_Z19STATE_init__handler8Events_t():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:105
		default:
			break;
	}
	
	return ret_state;
}
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	08 95       	ret

00000088 <STATE_start__handler(Events_t)>:
_Z20STATE_start__handler8Events_t():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:83
		default:
			break;
	}
	
	return ret_state;
}	
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	08 95       	ret

0000008e <STATE_error__handler(Events_t)>:
_Z20STATE_error__handler8Events_t():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/states.C:61
		default:
			break;
	}
	
	return ret_state;
}	
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <spi_fast_shift(unsigned char)>:
_Z14spi_fast_shifth():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:80
}

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
    SPDR = data;
  94:	8e bd       	out	0x2e, r24	; 46
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:81
    while((SPSR & (1<<SPIF))==0);
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <spi_fast_shift(unsigned char)+0x2>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:82
    return SPDR;
  9c:	8e b5       	in	r24, 0x2e	; 46
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:83
}
  9e:	08 95       	ret

000000a0 <__vector_19>:
__vector_19():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:364
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:368
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  b2:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <UART_TxHead>
  b6:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <UART_TxTail>
  ba:	98 17       	cp	r25, r24
  bc:	69 f0       	breq	.+26     	; 0xd8 <__vector_19+0x38>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:370
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  be:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <UART_TxTail>
  c2:	ef 5f       	subi	r30, 0xFF	; 255
  c4:	ef 73       	andi	r30, 0x3F	; 63
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:371
        UART_TxTail = tmptail;
  c6:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <UART_TxTail>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:373
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e0 54       	subi	r30, 0x40	; 64
  ce:	fd 4f       	sbci	r31, 0xFD	; 253
  d0:	80 81       	ld	r24, Z
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <__vector_19+0x42>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:376
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
  d8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:378
    }
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_18>:
__vector_18():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:322
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:329
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 108:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:330
    data = UART0_DATA;
 10c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:338
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 110:	88 71       	andi	r24, 0x18	; 24
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:344
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 112:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <UART_RxHead>
 116:	ef 5f       	subi	r30, 0xFF	; 255
 118:	ef 73       	andi	r30, 0x3F	; 63
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:346
    
    if ( tmphead == UART_RxTail ) {
 11a:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <UART_RxTail>
 11e:	e2 17       	cp	r30, r18
 120:	39 f0       	breq	.+14     	; 0x130 <__vector_18+0x3c>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:351
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 122:	e0 93 bf 02 	sts	0x02BF, r30	; 0x8002bf <UART_RxHead>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:353
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	e2 58       	subi	r30, 0x82	; 130
 12a:	fd 4f       	sbci	r31, 0xFD	; 253
 12c:	90 83       	st	Z, r25
 12e:	01 c0       	rjmp	.+2      	; 0x132 <__vector_18+0x3e>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:348
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 130:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:355
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   		
 132:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <UART_LastRxError>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:356
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_11>:
__vector_11():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:95
ISR(SPI_STC_vect)
{
}

ISR(TIMER1_COMPA_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <__vector_11+0x28>
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
event_push():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:121
// event_push
// Pushes an event into the ringbuffer
//------------------------------------------------------------------------------
uint8_t event_push(Events_t event)
{
    Events_t temp_event = event;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
ringbuffer__push():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:68
//Returns state of buffer, Overflow in case buffer is full
//------------------------------------------------------------------------------
Ringbuffer_State_t  ringbuffer__push(Ringbuffer_t* buffer, uint8_t* data)
{   
  //Check if buffer is full
  if(buffer->state == BUFFER_full)
 17e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ringbuffer_events>
 182:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ringbuffer_events+0x1>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	91 05       	cpc	r25, r1
 18a:	91 f1       	breq	.+100    	; 0x1f0 <__vector_11+0xa6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:72
  {
    return BUFFER_overflow;
  }
  else if(buffer->state == BUFFER_invalid)
 18c:	89 2b       	or	r24, r25
 18e:	81 f1       	breq	.+96     	; 0x1f0 <__vector_11+0xa6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:78
  {
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <ringbuffer_events+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:79
    memcpy((void *)(&buffer->p_buffer_data[buffer->write_pos * buffer->width]), (void *)data, buffer->width);
 196:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <ringbuffer_events+0x5>
 19a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <ringbuffer_events+0x3>
 19e:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <ringbuffer_events+0x7>
 1a2:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <ringbuffer_events+0x8>
 1a6:	49 2f       	mov	r20, r25
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	f9 01       	movw	r30, r18
 1b2:	89 9f       	mul	r24, r25
 1b4:	e0 0d       	add	r30, r0
 1b6:	f1 1d       	adc	r31, r1
 1b8:	11 24       	eor	r1, r1
 1ba:	cf 01       	movw	r24, r30
 1bc:	c0 d1       	rcall	.+896    	; 0x53e <memcpy>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:80
    buffer->write_pos = (buffer->write_pos + 1) & (buffer->size - 1);
 1be:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <ringbuffer_events+0x3>
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	98 0f       	add	r25, r24
 1c6:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <ringbuffer_events+0x4>
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	89 23       	and	r24, r25
 1ce:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <ringbuffer_events+0x3>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:82
    
    if(buffer->write_pos == buffer->read_pos)
 1d2:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <ringbuffer_events+0x2>
 1d6:	89 13       	cpse	r24, r25
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_11+0x96>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:84
    {
      buffer->state = BUFFER_full;
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_11+0x9a>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:88
    }
    else
    {
      buffer->state = BUFFER_normal;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ringbuffer_events+0x1>
 1e8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ringbuffer_events>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:91
    }
    
    buffer->busy = 0;
 1ec:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <ringbuffer_events+0x6>
__vector_11():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:97
	event_push(EVENT_timer_tick);
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_17>:
__vector_17():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:91
		
	wl_module_config_register(STATUS, status & 0x70);	
}

ISR(SPI_STC_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:92
}
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_1>:
__vector_1():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:45

volatile uint8_t PTX;
States_t main_state;

ISR(INT0_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	1f 93       	push	r17
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	1f 92       	push	r1
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:49
    volatile uint8_t status;   
    
	// Read wl_module status 
	wl_module_CSN_lo;                               // Pull down chip select
 25c:	2a 98       	cbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:50
	status = spi_fast_shift(NOP);					// Read status register
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	19 df       	rcall	.-462    	; 0x94 <spi_fast_shift(unsigned char)>
 262:	89 83       	std	Y+1, r24	; 0x01
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:51
	wl_module_CSN_hi;                               // Pull up chip select
 264:	2a 9a       	sbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:53
	
	switch(status & 0x70)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	80 77       	andi	r24, 0x70	; 112
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	41 f0       	breq	.+16     	; 0x27e <__vector_1+0x50>
 26e:	80 36       	cpi	r24, 0x60	; 96
 270:	31 f0       	breq	.+12     	; 0x27e <__vector_1+0x50>
 272:	80 31       	cpi	r24, 0x10	; 16
 274:	31 f4       	brne	.+12     	; 0x282 <__vector_1+0x54>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:60
		case (1 << TX_DS):		
			PTX = 0;	
		break;
		
		case (1 << MAX_RT):
			wl_module_CSN_lo;                               // Pull down chip select
 276:	2a 98       	cbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:61
			spi_fast_shift(FLUSH_TX);						// Flush TX-FIFO
 278:	81 ee       	ldi	r24, 0xE1	; 225
 27a:	0c df       	rcall	.-488    	; 0x94 <spi_fast_shift(unsigned char)>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:62
			wl_module_CSN_hi;  
 27c:	2a 9a       	sbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:75
		break;
		
		case ((1 << RX_DR) | (1 << TX_DS)):
			//wl_module_get_data(rxBuf);
			//bufferWrite(&wirelessRxBuf, rxBuf);
			PTX = 0;
 27e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:79
		break;	
	}
		
	if (status & (1<<TX_FULL))							//TX_FIFO Full <-- this is not an IRQ
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	80 ff       	sbrs	r24, 0
 286:	06 c0       	rjmp	.+12     	; 0x294 <__vector_1+0x66>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:81
	{
		wl_module_CSN_lo;  
 288:	2a 98       	cbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:82
		spi_fast_shift(FLUSH_TX);
 28a:	81 ee       	ldi	r24, 0xE1	; 225
 28c:	03 df       	rcall	.-506    	; 0x94 <spi_fast_shift(unsigned char)>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:83
		wl_module_CSN_hi;  
 28e:	2a 9a       	sbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:84
		PTX = 0;
 290:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:87
	}
		
	wl_module_config_register(STATUS, status & 0x70);	
 294:	19 81       	ldd	r17, Y+1	; 0x01
wl_module_config_register():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:437
extern uint8_t wl_module_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given wl-module register
{
	uint8_t status;
	
    wl_module_CSN_lo;
 296:	2a 98       	cbi	0x05, 2	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:438
    status = spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
 298:	87 e2       	ldi	r24, 0x27	; 39
 29a:	fc de       	rcall	.-520    	; 0x94 <spi_fast_shift(unsigned char)>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:439
    spi_fast_shift(value);
 29c:	81 2f       	mov	r24, r17
 29e:	80 77       	andi	r24, 0x70	; 112
 2a0:	f9 de       	rcall	.-526    	; 0x94 <spi_fast_shift(unsigned char)>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:440
    wl_module_CSN_hi;
 2a2:	2a 9a       	sbi	0x05, 2	; 5
__vector_1():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:88
}
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	1f 91       	pop	r17
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:
main():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:100
{
	event_push(EVENT_timer_tick);
}

int main(void)
{	
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	6d 97       	sbiw	r28, 0x1d	; 29
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:101
	uint8_t buf[27] = {0x15,0x72,0x22,0x02,0x00,0x72,0x22,0x02,0x00,0x80,0x0B,0x00,0x62,0x09,0x04,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x29,0x4E};
 2e2:	8b e1       	ldi	r24, 0x1B	; 27
 2e4:	e0 e0       	ldi	r30, 0x00	; 0
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	01 90       	ld	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x1e>
hardware_init():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:39
#include "wl_module.h"

void hardware_init(void)
{
	//Set pullup
	PORTD |= (1 << PD2);
 2f4:	5a 9a       	sbi	0x0b, 2	; 11
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:42

	//Configure pins as output
	DDRB |= ((1 << PB0)|(1 << PB2)|(1 << PB3)|(1 << PB5));
 2f6:	84 b1       	in	r24, 0x04	; 4
 2f8:	8d 62       	ori	r24, 0x2D	; 45
 2fa:	84 b9       	out	0x04, r24	; 4
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:43
	DDRD |= (1 << PD1);
 2fc:	51 9a       	sbi	0x0a, 1	; 10
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:45
	
	LED1_DDR |= (1 << LED1_PIN);
 2fe:	38 9a       	sbi	0x07, 0	; 7
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:46
	LED2_DDR |= (1 << LED2_PIN);	
 300:	39 9a       	sbi	0x07, 1	; 7
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:50
	
	//10 ms Timer
	
	OCR1A =	96;
 302:	80 e6       	ldi	r24, 0x60	; 96
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 30a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:52

	TCCR1B = (1 << WGM12)|(1 << CS12)|(1 << CS10);		
 30e:	8d e0       	ldi	r24, 0x0D	; 13
 310:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:53
	TIMSK1 = (1 << OCIE1A);
 314:	42 e0       	ldi	r20, 0x02	; 2
 316:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:56
	
	//External Interrupt
	EIMSK = (1 << INT0);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	8d bb       	out	0x1d, r24	; 29
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:59
	
	//Turn of analog comparator
    ACSR = 0x80;
 31e:	90 e8       	ldi	r25, 0x80	; 128
 320:	90 bf       	out	0x30, r25	; 48
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:64

	//Init UART
	//Baudrate = 115200 bps = 10 @ 10 MHz, U2X = 1
	//Baudrate = 57600 bps = 10 @ 10 MHz, U2X = 0
	UBRR0 = 10;		
 322:	2a e0       	ldi	r18, 0x0A	; 10
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 32a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:65
	UCSR0A |= (1 << U2X0);	
 32e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 332:	92 60       	ori	r25, 0x02	; 2
 334:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/hardware.C:66
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0); 
 338:	98 e9       	ldi	r25, 0x98	; 152
 33a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
wl_module_init():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:49
void wl_module_init() 
// Initializes pins and interrupt to communicate with the wl_module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= (1 << CSN);
 33e:	22 9a       	sbi	0x04, 2	; 4
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:50
	DDRB |= (1 << CE);
 340:	20 9a       	sbi	0x04, 0	; 4
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:51
    wl_module_CE_lo;
 342:	28 98       	cbi	0x05, 0	; 5
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/wl_module.C:52
    wl_module_CSN_hi;
 344:	2a 9a       	sbi	0x05, 2	; 5
spi_init():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:39


void spi_init()
// Initialize pins for spi communication
{
    DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
 346:	94 b1       	in	r25, 0x04	; 4
 348:	95 7c       	andi	r25, 0xC5	; 197
 34a:	94 b9       	out	0x04, r25	; 4
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:41
    // Define the following pins as output
    DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
 34c:	94 b1       	in	r25, 0x04	; 4
 34e:	9a 62       	ori	r25, 0x2A	; 42
 350:	94 b9       	out	0x04, r25	; 4
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:50
            (0<<SPIE)|              // SPI Interupt Enable
            (0<<DORD)|              // Data Order (0:MSB first / 1:LSB first)
            (1<<MSTR)|              // Master/Slave select   
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)
 352:	91 e5       	ldi	r25, 0x51	; 81
 354:	9c bd       	out	0x2c, r25	; 44
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/spi.C:52

    SPSR = (1<<SPI2X);              // Double Clock Rate
 356:	8d bd       	out	0x2d, r24	; 45
ringbuffer__init():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:45
//------------------------------------------------------------------------------
Ringbuffer_State_t ringbuffer__init(Ringbuffer_t *buffer, uint8_t *p_array, uint8_t buf_size, uint8_t buf_width)
{
  if((buf_width != 1) || (buf_width != 2) || (buf_width != 4))
  {
    buffer->state = BUFFER_empty;  
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <ringbuffer_events+0x1>
 360:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <ringbuffer_events>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:46
    buffer->write_pos = 0;
 364:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <ringbuffer_events+0x3>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:47
    buffer->read_pos = 0;
 368:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <ringbuffer_events+0x2>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:48
    buffer->busy = 0;
 36c:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <ringbuffer_events+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:49
    buffer->size = buf_size;
 370:	90 e2       	ldi	r25, 0x20	; 32
 372:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <ringbuffer_events+0x4>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:50
    buffer->width = buf_width;
 376:	40 93 62 02 	sts	0x0262, r20	; 0x800262 <ringbuffer_events+0x5>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:51
    buffer->p_buffer_data = p_array;
 37a:	4d e1       	ldi	r20, 0x1D	; 29
 37c:	52 e0       	ldi	r21, 0x02	; 2
 37e:	50 93 65 02 	sts	0x0265, r21	; 0x800265 <ringbuffer_events+0x8>
 382:	40 93 64 02 	sts	0x0264, r20	; 0x800264 <ringbuffer_events+0x7>
state_machine__init():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:70
States_t state_machine__init(void)
{
  ringbuffer__init(&ringbuffer_events, ringbuffer_events__data, EVENT_BUFFER_LENGTH, EVENT_BUFFER_WIDTH);

  //Initialize function pointers
  p_state_machine__state_function[0] = &STATE_error__handler;
 386:	47 e4       	ldi	r20, 0x47	; 71
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	50 93 71 02 	sts	0x0271, r21	; 0x800271 <p_state_machine__state_function+0x1>
 38e:	40 93 70 02 	sts	0x0270, r20	; 0x800270 <p_state_machine__state_function>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:71
  p_state_machine__state_function[1] = &STATE_start__handler;
 392:	44 e4       	ldi	r20, 0x44	; 68
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <p_state_machine__state_function+0x3>
 39a:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <p_state_machine__state_function+0x2>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:72
  p_state_machine__state_function[2] = &STATE_init__handler;
 39e:	41 e4       	ldi	r20, 0x41	; 65
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <p_state_machine__state_function+0x5>
 3a6:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <p_state_machine__state_function+0x4>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:73
  p_state_machine__state_function[3] = &STATE_receive__handler;
 3aa:	4e e3       	ldi	r20, 0x3E	; 62
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	50 93 77 02 	sts	0x0277, r21	; 0x800277 <p_state_machine__state_function+0x7>
 3b2:	40 93 76 02 	sts	0x0276, r20	; 0x800276 <p_state_machine__state_function+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:74
  p_state_machine__state_function[4] = &STATE_transmit__handler;
 3b6:	4b e3       	ldi	r20, 0x3B	; 59
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <p_state_machine__state_function+0x9>
 3be:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <p_state_machine__state_function+0x8>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:76

  p_state_machine__state_entering_function[0] = &STATE_error__entering_handler;
 3c2:	46 e3       	ldi	r20, 0x36	; 54
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	50 93 67 02 	sts	0x0267, r21	; 0x800267 <p_state_machine__state_entering_function+0x1>
 3ca:	40 93 66 02 	sts	0x0266, r20	; 0x800266 <p_state_machine__state_entering_function>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:77
  p_state_machine__state_entering_function[1] = &STATE_start__entering_handler;
 3ce:	4a e3       	ldi	r20, 0x3A	; 58
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	50 93 69 02 	sts	0x0269, r21	; 0x800269 <p_state_machine__state_entering_function+0x3>
 3d6:	40 93 68 02 	sts	0x0268, r20	; 0x800268 <p_state_machine__state_entering_function+0x2>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:78
  p_state_machine__state_entering_function[2] = &STATE_init__entering_handler;
 3da:	49 e3       	ldi	r20, 0x39	; 57
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	50 93 6b 02 	sts	0x026B, r21	; 0x80026b <p_state_machine__state_entering_function+0x5>
 3e2:	40 93 6a 02 	sts	0x026A, r20	; 0x80026a <p_state_machine__state_entering_function+0x4>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:79
  p_state_machine__state_entering_function[3] = &STATE_receive__entering_handler;
 3e6:	48 e3       	ldi	r20, 0x38	; 56
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <p_state_machine__state_entering_function+0x7>
 3ee:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <p_state_machine__state_entering_function+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:80
  p_state_machine__state_entering_function[4] = &STATE_transmit__entering_handler;
 3f2:	47 e3       	ldi	r20, 0x37	; 55
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <p_state_machine__state_entering_function+0x9>
 3fa:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <p_state_machine__state_entering_function+0x8>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:82

  state_machine__current_state = STATE_start;
 3fe:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <state_machine__current_state+0x1>
 402:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <state_machine__current_state>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:83
  state_machine__initialized = true;
 406:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <state_machine__initialized>
_delay_ms():
c:\winavr-20100110\avr\include\util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	2f e9       	ldi	r18, 0x9F	; 159
 40c:	86 e8       	ldi	r24, 0x86	; 134
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	de 01       	movw	r26, r28
 41e:	11 96       	adiw	r26, 0x01	; 1
 420:	8b e1       	ldi	r24, 0x1B	; 27
 422:	e0 e0       	ldi	r30, 0x00	; 0
 424:	81 50       	subi	r24, 0x01	; 1
crc8_calc():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/crc.C:109
    if (data == NULL)
        return 0xFF;
    
    crc &= 0xFF;
    
    while (len--)
 426:	39 f0       	breq	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/crc.C:110
        crc = crc8_table[crc ^ *data++];
 428:	9d 91       	ld	r25, X+
 42a:	e9 27       	eor	r30, r25
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	e5 5e       	subi	r30, 0xE5	; 229
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	e0 81       	ld	r30, Z
 434:	f7 cf       	rjmp	.-18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
main():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/main.C:114
	_delay_ms(50);

	crc8 = crc8_calc(buf,26);
	crc16 = crc16_calc(buf + 10,14);
	
	sei();
 436:	78 94       	sei
uart_putc():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:497
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 438:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <UART_TxHead>
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:499
    
    while ( tmphead == UART_TxTail ){
 440:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <UART_TxTail>
 444:	89 17       	cp	r24, r25
 446:	e1 f3       	breq	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:503
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 448:	a8 2f       	mov	r26, r24
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	a0 54       	subi	r26, 0x40	; 64
 44e:	bd 4f       	sbci	r27, 0xFD	; 253
 450:	ec 93       	st	X, r30
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:504
    UART_TxHead = tmphead;
 452:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <UART_TxHead>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/uart.C:507

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 456:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 45a:	80 62       	ori	r24, 0x20	; 32
 45c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
ringbuffer__pop():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:113
  {
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
 460:	dd 24       	eor	r13, r13
 462:	d3 94       	inc	r13
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:127
      buffer->state = BUFFER_empty;
    }
    //Sonst Pufferzustand normal
    else
    {
      buffer->state = BUFFER_normal;
 464:	02 e0       	ldi	r16, 0x02	; 2
 466:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:122

    //Wenn Leseposition = Schreibposition
    if(buffer->read_pos == buffer->write_pos)
    {
      //Pufferzustand leer
      buffer->state = BUFFER_empty;
 468:	ee 24       	eor	r14, r14
 46a:	e3 94       	inc	r14
 46c:	f1 2c       	mov	r15, r1
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:103
//Gets an element out of the buffer
//------------------------------------------------------------------------------
Ringbuffer_State_t ringbuffer__pop(Ringbuffer_t *buffer, uint8_t *data)
{  
  //Return error if buffer is empty
  if(buffer->state == BUFFER_empty)
 46e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ringbuffer_events>
 472:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ringbuffer_events+0x1>
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 05       	cpc	r25, r1
 47a:	81 f1       	breq	.+96     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:107
  {
    return BUFFER_underrun;
  }
  else if(buffer->state == BUFFER_invalid)
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	81 f1       	breq	.+96     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:113
  {
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
 480:	d0 92 63 02 	sts	0x0263, r13	; 0x800263 <ringbuffer_events+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:115

    memcpy((void *)data, (void *)(&buffer->p_buffer_data[buffer->read_pos * buffer->width]), buffer->width);
 484:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <ringbuffer_events+0x5>
 488:	c0 90 5f 02 	lds	r12, 0x025F	; 0x80025f <ringbuffer_events+0x2>
 48c:	48 2f       	mov	r20, r24
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <ringbuffer_events+0x7>
 494:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <ringbuffer_events+0x8>
 498:	c8 9e       	mul	r12, r24
 49a:	60 0d       	add	r22, r0
 49c:	71 1d       	adc	r23, r1
 49e:	11 24       	eor	r1, r1
 4a0:	ce 01       	movw	r24, r28
 4a2:	4c 96       	adiw	r24, 0x1c	; 28
 4a4:	4c d0       	rcall	.+152    	; 0x53e <memcpy>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:116
    buffer->read_pos = (buffer->read_pos + 1) & (buffer->size - 1);
 4a6:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <ringbuffer_events+0x4>
 4aa:	81 50       	subi	r24, 0x01	; 1
 4ac:	c3 94       	inc	r12
 4ae:	c8 22       	and	r12, r24
 4b0:	c0 92 5f 02 	sts	0x025F, r12	; 0x80025f <ringbuffer_events+0x2>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:119

    //Wenn Leseposition = Schreibposition
    if(buffer->read_pos == buffer->write_pos)
 4b4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <ringbuffer_events+0x3>
 4b8:	c8 12       	cpse	r12, r24
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:122
    {
      //Pufferzustand leer
      buffer->state = BUFFER_empty;
 4bc:	f0 92 5e 02 	sts	0x025E, r15	; 0x80025e <ringbuffer_events+0x1>
 4c0:	e0 92 5d 02 	sts	0x025D, r14	; 0x80025d <ringbuffer_events>
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:127
    }
    //Sonst Pufferzustand normal
    else
    {
      buffer->state = BUFFER_normal;
 4c6:	10 93 5e 02 	sts	0x025E, r17	; 0x80025e <ringbuffer_events+0x1>
 4ca:	00 93 5d 02 	sts	0x025D, r16	; 0x80025d <ringbuffer_events>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:130
    }
    
    buffer->busy = 0;
 4ce:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <ringbuffer_events+0x6>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:132

    return buffer->state;
 4d2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ringbuffer_events>
 4d6:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ringbuffer_events+0x1>
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
main():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/ringbuffer.C:105
Ringbuffer_State_t ringbuffer__pop(Ringbuffer_t *buffer, uint8_t *data)
{  
  //Return error if buffer is empty
  if(buffer->state == BUFFER_empty)
  {
    return BUFFER_underrun;
 4dc:	85 e0       	ldi	r24, 0x05	; 5
 4de:	90 e0       	ldi	r25, 0x00	; 0
event_get():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:141
//------------------------------------------------------------------------------
uint8_t event_get(Events_t * p_event)
{
    Ringbuffer_State_t bufstate = ringbuffer__pop(&ringbuffer_events, (uint8_t *)p_event);

    if((bufstate == BUFFER_normal) || (bufstate == BUFFER_empty))
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	02 97       	sbiw	r24, 0x02	; 2
 4e4:	20 f6       	brcc	.-120    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
state_machine__calculate_state():
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:96
//------------------------------------------------------------------------------
States_t state_machine__calculate_state(Events_t event)
{
  States_t new_state = state_machine__current_state;

  if(!state_machine__initialized)
 4e6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <state_machine__initialized>
 4ea:	88 23       	and	r24, r24
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ee:	bf cf       	rjmp	.-130    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:103
    return STATE_error;
  }
  else
  {
    //Call state function
    new_state = p_state_machine__state_function[(uint8_t)state_machine__current_state](event);
 4f0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <state_machine__current_state>
 4f4:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <state_machine__current_state+0x1>
 4f8:	ff 27       	eor	r31, r31
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	e0 59       	subi	r30, 0x90	; 144
 500:	fd 4f       	sbci	r31, 0xFD	; 253
 502:	01 90       	ld	r0, Z+
 504:	f0 81       	ld	r31, Z
 506:	e0 2d       	mov	r30, r0
 508:	8c 8d       	ldd	r24, Y+28	; 0x1c
 50a:	9d 8d       	ldd	r25, Y+29	; 0x1d
 50c:	09 95       	icall
 50e:	5c 01       	movw	r10, r24
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:106

    //If state has changed, call new state entering function
    if (new_state != state_machine__current_state)
 510:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <state_machine__current_state>
 514:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <state_machine__current_state+0x1>
 518:	a8 16       	cp	r10, r24
 51a:	b9 06       	cpc	r11, r25
 51c:	09 f4       	brne	.+2      	; 0x520 <__stack+0x21>
 51e:	a7 cf       	rjmp	.-178    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:108
    {
      p_state_machine__state_entering_function[(uint8_t)new_state]();
 520:	f5 01       	movw	r30, r10
 522:	ff 27       	eor	r31, r31
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	ea 59       	subi	r30, 0x9A	; 154
 52a:	fd 4f       	sbci	r31, 0xFD	; 253
 52c:	01 90       	ld	r0, Z+
 52e:	f0 81       	ld	r31, Z
 530:	e0 2d       	mov	r30, r0
 532:	09 95       	icall
C:\Users\mcmai\Documents\_DEV\AVR\hoymiles-nrf-comm/src/statemachine.C:109
      state_machine__current_state = new_state;
 534:	b0 92 7b 02 	sts	0x027B, r11	; 0x80027b <state_machine__current_state+0x1>
 538:	a0 92 7a 02 	sts	0x027A, r10	; 0x80027a <state_machine__current_state>
 53c:	98 cf       	rjmp	.-208    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>

0000053e <memcpy>:
memcpy():
 53e:	fb 01       	movw	r30, r22
 540:	dc 01       	movw	r26, r24
 542:	02 c0       	rjmp	.+4      	; 0x548 <memcpy+0xa>
 544:	01 90       	ld	r0, Z+
 546:	0d 92       	st	X+, r0
 548:	41 50       	subi	r20, 0x01	; 1
 54a:	50 40       	sbci	r21, 0x00	; 0
 54c:	d8 f7       	brcc	.-10     	; 0x544 <memcpy+0x6>
 54e:	08 95       	ret

00000550 <_exit>:
exit():
 550:	f8 94       	cli

00000552 <__stop_program>:
__stop_program():
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
