
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001300  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800132  00800132  000013c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002feb  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001302  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125f  00000000  00000000  00005889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a08  00000000  00000000  00006ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de4  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002364  00000000  00000000  000082d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000a638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c1       	rjmp	.+818    	; 0x334 <__ctors_end>
       2:	b4 c1       	rjmp	.+872    	; 0x36c <__vector_1>
       4:	b2 c1       	rjmp	.+868    	; 0x36a <__bad_interrupt>
       6:	b1 c1       	rjmp	.+866    	; 0x36a <__bad_interrupt>
       8:	b0 c1       	rjmp	.+864    	; 0x36a <__bad_interrupt>
       a:	af c1       	rjmp	.+862    	; 0x36a <__bad_interrupt>
       c:	ae c1       	rjmp	.+860    	; 0x36a <__bad_interrupt>
       e:	ad c1       	rjmp	.+858    	; 0x36a <__bad_interrupt>
      10:	ac c1       	rjmp	.+856    	; 0x36a <__bad_interrupt>
      12:	ab c1       	rjmp	.+854    	; 0x36a <__bad_interrupt>
      14:	aa c1       	rjmp	.+852    	; 0x36a <__bad_interrupt>
      16:	fe c1       	rjmp	.+1020   	; 0x414 <__vector_11>
      18:	a8 c1       	rjmp	.+848    	; 0x36a <__bad_interrupt>
      1a:	a7 c1       	rjmp	.+846    	; 0x36a <__bad_interrupt>
      1c:	a6 c1       	rjmp	.+844    	; 0x36a <__bad_interrupt>
      1e:	a5 c1       	rjmp	.+842    	; 0x36a <__bad_interrupt>
      20:	a4 c1       	rjmp	.+840    	; 0x36a <__bad_interrupt>
      22:	ee c1       	rjmp	.+988    	; 0x400 <__vector_17>
      24:	a1 c5       	rjmp	.+2882   	; 0xb68 <__vector_18>
      26:	cb c5       	rjmp	.+2966   	; 0xbbe <__vector_19>
      28:	a0 c1       	rjmp	.+832    	; 0x36a <__bad_interrupt>
      2a:	9f c1       	rjmp	.+830    	; 0x36a <__bad_interrupt>
      2c:	9e c1       	rjmp	.+828    	; 0x36a <__bad_interrupt>
      2e:	9d c1       	rjmp	.+826    	; 0x36a <__bad_interrupt>
      30:	9c c1       	rjmp	.+824    	; 0x36a <__bad_interrupt>
      32:	9b c1       	rjmp	.+822    	; 0x36a <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	00 00       	nop
      36:	c1 c0       	rjmp	.+386    	; 0x1ba <__SREG__+0x17b>
      38:	81 c1       	rjmp	.+770    	; 0x33c <__ctors_end+0x8>
      3a:	40 01       	movw	r8, r0
      3c:	01 c3       	rjmp	.+1538   	; 0x640 <itoa+0x24>
      3e:	c0 03       	fmuls	r20, r16
      40:	80 02       	muls	r24, r16
      42:	41 c2       	rjmp	.+1154   	; 0x4c6 <hardware_init+0x8>
      44:	01 c6       	rjmp	.+3074   	; 0xc48 <uart_getc+0x4>
      46:	c0 06       	cpc	r12, r16
      48:	80 07       	cpc	r24, r16
      4a:	41 c7       	rjmp	.+3714   	; 0xece <wl_module_get_rf_setup+0x14>
      4c:	00 05       	cpc	r16, r0
      4e:	c1 c5       	rjmp	.+2946   	; 0xbd2 <__vector_19+0x14>
      50:	81 c4       	rjmp	.+2306   	; 0x954 <ringbuffer__contains+0x50>
      52:	40 04       	cpc	r4, r0
      54:	01 cc       	rjmp	.-2046   	; 0xfffff858 <__eeprom_end+0xff7ef858>
      56:	c0 0c       	add	r12, r0
      58:	80 0d       	add	r24, r0
      5a:	41 cd       	rjmp	.-1406   	; 0xfffffade <__eeprom_end+0xff7efade>
      5c:	00 0f       	add	r16, r16
      5e:	c1 cf       	rjmp	.-126    	; 0xffffffe2 <__eeprom_end+0xff7effe2>
      60:	81 ce       	rjmp	.-766    	; 0xfffffd64 <__eeprom_end+0xff7efd64>
      62:	40 0e       	add	r4, r16
      64:	00 0a       	sbc	r0, r16
      66:	c1 ca       	rjmp	.-2686   	; 0xfffff5ea <__eeprom_end+0xff7ef5ea>
      68:	81 cb       	rjmp	.-2302   	; 0xfffff76c <__eeprom_end+0xff7ef76c>
      6a:	40 0b       	sbc	r20, r16
      6c:	01 c9       	rjmp	.-3582   	; 0xfffff270 <__eeprom_end+0xff7ef270>
      6e:	c0 09       	sbc	r28, r0
      70:	80 08       	sbc	r8, r0
      72:	41 c8       	rjmp	.-3966   	; 0xfffff0f6 <__eeprom_end+0xff7ef0f6>
      74:	01 d8       	rcall	.-4094   	; 0xfffff078 <__eeprom_end+0xff7ef078>
      76:	c0 18       	sub	r12, r0
      78:	80 19       	sub	r24, r0
      7a:	41 d9       	rcall	.-3454   	; 0xfffff2fe <__eeprom_end+0xff7ef2fe>
      7c:	00 1b       	sub	r16, r16
      7e:	c1 db       	rcall	.-2174   	; 0xfffff802 <__eeprom_end+0xff7ef802>
      80:	81 da       	rcall	.-2814   	; 0xfffff584 <__eeprom_end+0xff7ef584>
      82:	40 1a       	sub	r4, r16
      84:	00 1e       	adc	r0, r16
      86:	c1 de       	rcall	.-638    	; 0xfffffe0a <__eeprom_end+0xff7efe0a>
      88:	81 df       	rcall	.-254    	; 0xffffff8c <__eeprom_end+0xff7eff8c>
      8a:	40 1f       	adc	r20, r16
      8c:	01 dd       	rcall	.-1534   	; 0xfffffa90 <__eeprom_end+0xff7efa90>
      8e:	c0 1d       	adc	r28, r0
      90:	80 1c       	adc	r8, r0
      92:	41 dc       	rcall	.-1918   	; 0xfffff916 <__eeprom_end+0xff7ef916>
      94:	00 14       	cp	r0, r0
      96:	c1 d4       	rcall	.+2434   	; 0xa1a <spi_transfer_sync+0x1a>
      98:	81 d5       	rcall	.+2818   	; 0xb9c <__vector_18+0x34>
      9a:	40 15       	cp	r20, r0
      9c:	01 d7       	rcall	.+3586   	; 0xea0 <wl_module_get_rf_ch+0x6>
      9e:	c0 17       	cp	r28, r16
      a0:	80 16       	cp	r8, r16
      a2:	41 d6       	rcall	.+3202   	; 0xd26 <uart_available+0x18>
      a4:	01 d2       	rcall	.+1026   	; 0x4a8 <crc16_calc+0x16>
      a6:	c0 12       	cpse	r12, r16
      a8:	80 13       	cpse	r24, r16
      aa:	41 d3       	rcall	.+1666   	; 0x72e <itoa+0x112>
      ac:	00 11       	cpse	r16, r0
      ae:	c1 d1       	rcall	.+898    	; 0x432 <__vector_11+0x1e>
      b0:	81 d0       	rcall	.+258    	; 0x1b4 <__SREG__+0x175>
      b2:	40 10       	cpse	r4, r0
      b4:	01 f0       	breq	.+0      	; 0xb6 <__SREG__+0x77>
      b6:	c0 30       	cpi	r28, 0x00	; 0
      b8:	80 31       	cpi	r24, 0x10	; 16
      ba:	41 f1       	breq	.+80     	; 0x10c <__SREG__+0xcd>
      bc:	00 33       	cpi	r16, 0x30	; 48
      be:	c1 f3       	breq	.-16     	; 0xb0 <__SREG__+0x71>
      c0:	81 f2       	breq	.-96     	; 0x62 <__SREG__+0x23>
      c2:	40 32       	cpi	r20, 0x20	; 32
      c4:	00 36       	cpi	r16, 0x60	; 96
      c6:	c1 f6       	brne	.-80     	; 0x78 <__SREG__+0x39>
      c8:	81 f7       	brne	.-32     	; 0xaa <__SREG__+0x6b>
      ca:	40 37       	cpi	r20, 0x70	; 112
      cc:	01 f5       	brne	.+64     	; 0x10e <__SREG__+0xcf>
      ce:	c0 35       	cpi	r28, 0x50	; 80
      d0:	80 34       	cpi	r24, 0x40	; 64
      d2:	41 f4       	brne	.+16     	; 0xe4 <__SREG__+0xa5>
      d4:	00 3c       	cpi	r16, 0xC0	; 192
      d6:	c1 fc       	sbrc	r12, 1
      d8:	81 fd       	sbrc	r24, 1
      da:	40 3d       	cpi	r20, 0xD0	; 208
      dc:	01 ff       	sbrs	r16, 1
      de:	c0 3f       	cpi	r28, 0xF0	; 240
      e0:	80 3e       	cpi	r24, 0xE0	; 224
      e2:	41 fe       	sbrs	r4, 1
      e4:	01 fa       	bst	r0, 1
      e6:	c0 3a       	cpi	r28, 0xA0	; 160
      e8:	80 3b       	cpi	r24, 0xB0	; 176
      ea:	41 fb       	bst	r20, 1
      ec:	00 39       	cpi	r16, 0x90	; 144
      ee:	c1 f9       	bld	r28, 1
      f0:	81 f8       	bld	r8, 1
      f2:	40 38       	cpi	r20, 0x80	; 128
      f4:	00 28       	or	r0, r0
      f6:	c1 e8       	ldi	r28, 0x81	; 129
      f8:	81 e9       	ldi	r24, 0x91	; 145
      fa:	40 29       	or	r20, r0
      fc:	01 eb       	ldi	r16, 0xB1	; 177
      fe:	c0 2b       	or	r28, r16
     100:	80 2a       	or	r8, r16
     102:	41 ea       	ldi	r20, 0xA1	; 161
     104:	01 ee       	ldi	r16, 0xE1	; 225
     106:	c0 2e       	mov	r12, r16
     108:	80 2f       	mov	r24, r16
     10a:	41 ef       	ldi	r20, 0xF1	; 241
     10c:	00 2d       	mov	r16, r0
     10e:	c1 ed       	ldi	r28, 0xD1	; 209
     110:	81 ec       	ldi	r24, 0xC1	; 193
     112:	40 2c       	mov	r4, r0
     114:	01 e4       	ldi	r16, 0x41	; 65
     116:	c0 24       	eor	r12, r0
     118:	80 25       	eor	r24, r0
     11a:	41 e5       	ldi	r20, 0x51	; 81
     11c:	00 27       	eor	r16, r16
     11e:	c1 e7       	ldi	r28, 0x71	; 113
     120:	81 e6       	ldi	r24, 0x61	; 97
     122:	40 26       	eor	r4, r16
     124:	00 22       	and	r0, r16
     126:	c1 e2       	ldi	r28, 0x21	; 33
     128:	81 e3       	ldi	r24, 0x31	; 49
     12a:	40 23       	and	r20, r16
     12c:	01 e1       	ldi	r16, 0x11	; 17
     12e:	c0 21       	and	r28, r0
     130:	80 20       	and	r8, r0
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	01 a0       	ldd	r0, Z+33	; 0x21
     136:	c0 60       	ori	r28, 0x00	; 0
     138:	80 61       	ori	r24, 0x10	; 16
     13a:	41 a1       	ldd	r20, Z+33	; 0x21
     13c:	00 63       	ori	r16, 0x30	; 48
     13e:	c1 a3       	std	Z+33, r28	; 0x21
     140:	81 a2       	std	Z+33, r8	; 0x21
     142:	40 62       	ori	r20, 0x20	; 32
     144:	00 66       	ori	r16, 0x60	; 96
     146:	c1 a6       	std	Z+41, r12	; 0x29
     148:	81 a7       	std	Z+41, r24	; 0x29
     14a:	40 67       	ori	r20, 0x70	; 112
     14c:	01 a5       	ldd	r16, Z+41	; 0x29
     14e:	c0 65       	ori	r28, 0x50	; 80
     150:	80 64       	ori	r24, 0x40	; 64
     152:	41 a4       	ldd	r4, Z+41	; 0x29
     154:	00 6c       	ori	r16, 0xC0	; 192
     156:	c1 ac       	ldd	r12, Z+57	; 0x39
     158:	81 ad       	ldd	r24, Z+57	; 0x39
     15a:	40 6d       	ori	r20, 0xD0	; 208
     15c:	01 af       	std	Z+57, r16	; 0x39
     15e:	c0 6f       	ori	r28, 0xF0	; 240
     160:	80 6e       	ori	r24, 0xE0	; 224
     162:	41 ae       	std	Z+57, r4	; 0x39
     164:	01 aa       	std	Z+49, r0	; 0x31
     166:	c0 6a       	ori	r28, 0xA0	; 160
     168:	80 6b       	ori	r24, 0xB0	; 176
     16a:	41 ab       	std	Z+49, r20	; 0x31
     16c:	00 69       	ori	r16, 0x90	; 144
     16e:	c1 a9       	ldd	r28, Z+49	; 0x31
     170:	81 a8       	ldd	r8, Z+49	; 0x31
     172:	40 68       	ori	r20, 0x80	; 128
     174:	00 78       	andi	r16, 0x80	; 128
     176:	c1 b8       	out	0x01, r12	; 1
     178:	81 b9       	out	0x01, r24	; 1
     17a:	40 79       	andi	r20, 0x90	; 144
     17c:	01 bb       	out	0x11, r16	; 17
     17e:	c0 7b       	andi	r28, 0xB0	; 176
     180:	80 7a       	andi	r24, 0xA0	; 160
     182:	41 ba       	out	0x11, r4	; 17
     184:	01 be       	out	0x31, r0	; 49
     186:	c0 7e       	andi	r28, 0xE0	; 224
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	41 bf       	out	0x31, r20	; 49
     18c:	00 7d       	andi	r16, 0xD0	; 208
     18e:	c1 bd       	out	0x21, r28	; 33
     190:	81 bc       	out	0x21, r8	; 33
     192:	40 7c       	andi	r20, 0xC0	; 192
     194:	01 b4       	in	r0, 0x21	; 33
     196:	c0 74       	andi	r28, 0x40	; 64
     198:	80 75       	andi	r24, 0x50	; 80
     19a:	41 b5       	in	r20, 0x21	; 33
     19c:	00 77       	andi	r16, 0x70	; 112
     19e:	c1 b7       	in	r28, 0x31	; 49
     1a0:	81 b6       	in	r8, 0x31	; 49
     1a2:	40 76       	andi	r20, 0x60	; 96
     1a4:	00 72       	andi	r16, 0x20	; 32
     1a6:	c1 b2       	in	r12, 0x11	; 17
     1a8:	81 b3       	in	r24, 0x11	; 17
     1aa:	40 73       	andi	r20, 0x30	; 48
     1ac:	01 b1       	in	r16, 0x01	; 1
     1ae:	c0 71       	andi	r28, 0x10	; 16
     1b0:	80 70       	andi	r24, 0x00	; 0
     1b2:	41 b0       	in	r4, 0x01	; 1
     1b4:	00 50       	subi	r16, 0x00	; 0
     1b6:	c1 90       	ld	r12, Z+
     1b8:	81 91       	ld	r24, Z+
     1ba:	40 51       	subi	r20, 0x10	; 16
     1bc:	01 93       	st	Z+, r16
     1be:	c0 53       	subi	r28, 0x30	; 48
     1c0:	80 52       	subi	r24, 0x20	; 32
     1c2:	41 92       	st	Z+, r4
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	c0 56       	subi	r28, 0x60	; 96
     1c8:	80 57       	subi	r24, 0x70	; 112
     1ca:	41 97       	sbiw	r24, 0x11	; 17
     1cc:	00 55       	subi	r16, 0x50	; 80
     1ce:	c1 95       	neg	r28
     1d0:	81 94       	neg	r8
     1d2:	40 54       	subi	r20, 0x40	; 64
     1d4:	01 9c       	mul	r0, r1
     1d6:	c0 5c       	subi	r28, 0xC0	; 192
     1d8:	80 5d       	subi	r24, 0xD0	; 208
     1da:	41 9d       	mul	r20, r1
     1dc:	00 5f       	subi	r16, 0xF0	; 240
     1de:	c1 9f       	mul	r28, r17
     1e0:	81 9e       	mul	r8, r17
     1e2:	40 5e       	subi	r20, 0xE0	; 224
     1e4:	00 5a       	subi	r16, 0xA0	; 160
     1e6:	c1 9a       	sbi	0x18, 1	; 24
     1e8:	81 9b       	sbis	0x10, 1	; 16
     1ea:	40 5b       	subi	r20, 0xB0	; 176
     1ec:	01 99       	sbic	0x00, 1	; 0
     1ee:	c0 59       	subi	r28, 0x90	; 144
     1f0:	80 58       	subi	r24, 0x80	; 128
     1f2:	41 98       	cbi	0x08, 1	; 8
     1f4:	01 88       	ldd	r0, Z+17	; 0x11
     1f6:	c0 48       	sbci	r28, 0x80	; 128
     1f8:	80 49       	sbci	r24, 0x90	; 144
     1fa:	41 89       	ldd	r20, Z+17	; 0x11
     1fc:	00 4b       	sbci	r16, 0xB0	; 176
     1fe:	c1 8b       	std	Z+17, r28	; 0x11
     200:	81 8a       	std	Z+17, r8	; 0x11
     202:	40 4a       	sbci	r20, 0xA0	; 160
     204:	00 4e       	sbci	r16, 0xE0	; 224
     206:	c1 8e       	std	Z+25, r12	; 0x19
     208:	81 8f       	std	Z+25, r24	; 0x19
     20a:	40 4f       	sbci	r20, 0xF0	; 240
     20c:	01 8d       	ldd	r16, Z+25	; 0x19
     20e:	c0 4d       	sbci	r28, 0xD0	; 208
     210:	80 4c       	sbci	r24, 0xC0	; 192
     212:	41 8c       	ldd	r4, Z+25	; 0x19
     214:	00 44       	sbci	r16, 0x40	; 64
     216:	c1 84       	ldd	r12, Z+9	; 0x09
     218:	81 85       	ldd	r24, Z+9	; 0x09
     21a:	40 45       	sbci	r20, 0x50	; 80
     21c:	01 87       	std	Z+9, r16	; 0x09
     21e:	c0 47       	sbci	r28, 0x70	; 112
     220:	80 46       	sbci	r24, 0x60	; 96
     222:	41 86       	std	Z+9, r4	; 0x09
     224:	01 82       	std	Z+1, r0	; 0x01
     226:	c0 42       	sbci	r28, 0x20	; 32
     228:	80 43       	sbci	r24, 0x30	; 48
     22a:	41 83       	std	Z+1, r20	; 0x01
     22c:	00 41       	sbci	r16, 0x10	; 16
     22e:	c1 81       	ldd	r28, Z+1	; 0x01
     230:	81 80       	ldd	r8, Z+1	; 0x01
     232:	40 40       	sbci	r20, 0x00	; 0

00000234 <crc8_table>:
     234:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     244:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     254:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
     264:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
     274:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
     284:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
     294:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
     2a4:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.
     2b4:	80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f     ................
     2c4:	90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f     ................
     2d4:	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af     ................
     2e4:	b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf     ................
     2f4:	c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf     ................
     304:	d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df     ................
     314:	e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef     ................
     324:	f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff     ................

00000334 <__ctors_end>:
     334:	11 24       	eor	r1, r1
     336:	1f be       	out	0x3f, r1	; 63
     338:	cf ef       	ldi	r28, 0xFF	; 255
     33a:	d4 e0       	ldi	r29, 0x04	; 4
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	cd bf       	out	0x3d, r28	; 61

00000340 <__do_copy_data>:
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b1 e0       	ldi	r27, 0x01	; 1
     346:	e0 e0       	ldi	r30, 0x00	; 0
     348:	f3 e1       	ldi	r31, 0x13	; 19
     34a:	02 c0       	rjmp	.+4      	; 0x350 <__do_copy_data+0x10>
     34c:	05 90       	lpm	r0, Z+
     34e:	0d 92       	st	X+, r0
     350:	a2 33       	cpi	r26, 0x32	; 50
     352:	b1 07       	cpc	r27, r17
     354:	d9 f7       	brne	.-10     	; 0x34c <__do_copy_data+0xc>

00000356 <__do_clear_bss>:
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	a2 e3       	ldi	r26, 0x32	; 50
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	01 c0       	rjmp	.+2      	; 0x360 <.do_clear_bss_start>

0000035e <.do_clear_bss_loop>:
     35e:	1d 92       	st	X+, r1

00000360 <.do_clear_bss_start>:
     360:	a7 3f       	cpi	r26, 0xF7	; 247
     362:	b2 07       	cpc	r27, r18
     364:	e1 f7       	brne	.-8      	; 0x35e <.do_clear_bss_loop>
     366:	36 d7       	rcall	.+3692   	; 0x11d4 <main>
     368:	c9 c7       	rjmp	.+3986   	; 0x12fc <_exit>

0000036a <__bad_interrupt>:
     36a:	4a ce       	rjmp	.-876    	; 0x0 <__vectors>

0000036c <__vector_1>:

volatile uint8_t PTX;
States_t main_state;

ISR(INT0_vect)
{
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	ef 93       	push	r30
     38c:	ff 93       	push	r31
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t status;   
    
	// Read wl_module status 
	wl_module_CSN_lo;                               // Pull down chip select
     398:	2a 98       	cbi	0x05, 2	; 5
	status = spi_fast_shift(NOP);					// Read status register
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	4f d3       	rcall	.+1694   	; 0xa3c <spi_fast_shift>
     39e:	89 83       	std	Y+1, r24	; 0x01
	wl_module_CSN_hi;                               // Pull up chip select
     3a0:	2a 9a       	sbi	0x05, 2	; 5
	
	switch(status & 0x70)
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	80 77       	andi	r24, 0x70	; 112
     3a6:	80 32       	cpi	r24, 0x20	; 32
     3a8:	41 f0       	breq	.+16     	; 0x3ba <__vector_1+0x4e>
     3aa:	80 36       	cpi	r24, 0x60	; 96
     3ac:	31 f0       	breq	.+12     	; 0x3ba <__vector_1+0x4e>
     3ae:	80 31       	cpi	r24, 0x10	; 16
     3b0:	31 f4       	brne	.+12     	; 0x3be <__vector_1+0x52>
		case (1 << TX_DS):		
			PTX = 0;	
		break;
		
		case (1 << MAX_RT):
			wl_module_CSN_lo;                               // Pull down chip select
     3b2:	2a 98       	cbi	0x05, 2	; 5
			spi_fast_shift(FLUSH_TX);						// Flush TX-FIFO
     3b4:	81 ee       	ldi	r24, 0xE1	; 225
     3b6:	42 d3       	rcall	.+1668   	; 0xa3c <spi_fast_shift>
			wl_module_CSN_hi;  
     3b8:	2a 9a       	sbi	0x05, 2	; 5
		break;
		
		case ((1 << RX_DR) | (1 << TX_DS)):
			//wl_module_get_data(rxBuf);
			//bufferWrite(&wirelessRxBuf, rxBuf);
			PTX = 0;
     3ba:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <PTX>
		break;	
	}
		
	if (status & (1<<TX_FULL))							//TX_FIFO Full <-- this is not an IRQ
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	80 ff       	sbrs	r24, 0
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__vector_1+0x64>
	{
		wl_module_CSN_lo;  
     3c4:	2a 98       	cbi	0x05, 2	; 5
		spi_fast_shift(FLUSH_TX);
     3c6:	81 ee       	ldi	r24, 0xE1	; 225
     3c8:	39 d3       	rcall	.+1650   	; 0xa3c <spi_fast_shift>
		wl_module_CSN_hi;  
     3ca:	2a 9a       	sbi	0x05, 2	; 5
		PTX = 0;
     3cc:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <PTX>
	}
		
	wl_module_config_register(STATUS, status & 0x70);	
     3d0:	69 81       	ldd	r22, Y+1	; 0x01
     3d2:	60 77       	andi	r22, 0x70	; 112
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	f3 d4       	rcall	.+2534   	; 0xdbe <wl_module_config_register>
}
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	ff 91       	pop	r31
     3e0:	ef 91       	pop	r30
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	0f 90       	pop	r0
     3fc:	1f 90       	pop	r1
     3fe:	18 95       	reti

00000400 <__vector_17>:

ISR(SPI_STC_vect)
{
     400:	1f 92       	push	r1
     402:	0f 92       	push	r0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	0f 92       	push	r0
     408:	11 24       	eor	r1, r1
}
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	2f 93       	push	r18
     420:	3f 93       	push	r19
     422:	4f 93       	push	r20
     424:	5f 93       	push	r21
     426:	6f 93       	push	r22
     428:	7f 93       	push	r23
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
	event_push(EVENT_timer_tick);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	67 d3       	rcall	.+1742   	; 0xb08 <event_push>
}
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <crc8_calc>:
// Calculation of CRC8 over a defined buffer
// void const* mem, uint8_t len
// Polynomial = 0x01, Initial Value = 0
//------------------------------------------------------------------------------
uint8_t crc8_calc(uint8_t* mem, uint8_t len) 
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t crc8 = 0;
     466:	19 82       	std	Y+1, r1	; 0x01
    uint8_t table_index = 0;
    uint8_t *data = mem;
    
    if (data == NULL)
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	71 f0       	breq	.+28     	; 0x488 <crc8_calc+0x2c>
     46c:	dc 01       	movw	r26, r24
        return 0xFF;        
    
    while (len--)
     46e:	61 50       	subi	r22, 0x01	; 1
     470:	48 f0       	brcs	.+18     	; 0x484 <crc8_calc+0x28>
    {
      table_index = *data++^crc8;
     472:	ed 91       	ld	r30, X+
     474:	99 81       	ldd	r25, Y+1	; 0x01
      crc8 = pgm_read_byte(&crc8_table[table_index]);
     476:	e9 27       	eor	r30, r25
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	ec 5c       	subi	r30, 0xCC	; 204
     47c:	fd 4f       	sbci	r31, 0xFD	; 253
     47e:	e4 91       	lpm	r30, Z
     480:	e9 83       	std	Y+1, r30	; 0x01
     482:	f5 cf       	rjmp	.-22     	; 0x46e <crc8_calc+0x12>
    }    
    
    return crc8;
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	01 c0       	rjmp	.+2      	; 0x48a <crc8_calc+0x2e>
    volatile uint8_t crc8 = 0;
    uint8_t table_index = 0;
    uint8_t *data = mem;
    
    if (data == NULL)
        return 0xFF;        
     488:	8f ef       	ldi	r24, 0xFF	; 255
      table_index = *data++^crc8;
      crc8 = pgm_read_byte(&crc8_table[table_index]);
    }    
    
    return crc8;
}
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <crc16_calc>:
// Calculation of CRC16 - MODBUS over a defined buffer
// void const* mem, uint8_t len
// Polynomial = 0x8005, Initial Value = 0xFFFF
//------------------------------------------------------------------------------
uint16_t crc16_calc(uint8_t* mem, uint8_t len) 
{  
     492:	dc 01       	movw	r26, r24
  
  uint8_t *data = mem;
  uint16_t crc16 = 0xFFFF;
     494:	ef ef       	ldi	r30, 0xFF	; 255
     496:	ff ef       	ldi	r31, 0xFF	; 255
  uint8_t xor = 0;

	while( len-- )
     498:	61 50       	subi	r22, 0x01	; 1
     49a:	78 f0       	brcs	.+30     	; 0x4ba <crc16_calc+0x28>
	{
		xor = (*data++) ^ crc16;
     49c:	8d 91       	ld	r24, X+
		crc16 >>= 8;
     49e:	4f 2f       	mov	r20, r31
     4a0:	55 27       	eor	r21, r21
		crc16 ^= pgm_read_word(&crc16_table[xor]);
     4a2:	e8 27       	eor	r30, r24
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ec 5c       	subi	r30, 0xCC	; 204
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	25 91       	lpm	r18, Z+
     4b0:	34 91       	lpm	r19, Z
     4b2:	fa 01       	movw	r30, r20
     4b4:	e2 27       	eor	r30, r18
     4b6:	f3 27       	eor	r31, r19
     4b8:	ef cf       	rjmp	.-34     	; 0x498 <crc16_calc+0x6>
	}
  
  return crc16;
}  
     4ba:	cf 01       	movw	r24, r30
     4bc:	08 95       	ret

000004be <hardware_init>:
#include "wl_module.h"

void hardware_init(void)
{
	//Set pullup
	PORTD |= (1 << PD2);
     4be:	5a 9a       	sbi	0x0b, 2	; 11

	//Configure pins as output
	DDRB |= ((1 << PB0)|(1 << PB2)|(1 << PB3)|(1 << PB5));
     4c0:	84 b1       	in	r24, 0x04	; 4
     4c2:	8d 62       	ori	r24, 0x2D	; 45
     4c4:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD1);
     4c6:	51 9a       	sbi	0x0a, 1	; 10
	
	LED1_DDR |= (1 << LED1_PIN);
     4c8:	38 9a       	sbi	0x07, 0	; 7
	LED2_DDR |= (1 << LED2_PIN);	
     4ca:	39 9a       	sbi	0x07, 1	; 7
	
	//10 ms Timer
	
	OCR1A =	96;
     4cc:	80 e6       	ldi	r24, 0x60	; 96
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     4d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>

	TCCR1B = (1 << WGM12)|(1 << CS12)|(1 << CS10);		
     4d8:	8d e0       	ldi	r24, 0x0D	; 13
     4da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	TIMSK1 = (1 << OCIE1A);
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
	
	//External Interrupt
	EIMSK = (1 << INT0);
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	8d bb       	out	0x1d, r24	; 29
	
	//Turn of analog comparator
    ACSR = 0x80;
     4e8:	80 e8       	ldi	r24, 0x80	; 128
     4ea:	80 bf       	out	0x30, r24	; 48

	//Init UART
	//Baudrate = 115200 bps = 10 @ 10 MHz, U2X = 1
	//Baudrate = 57600 bps = 10 @ 10 MHz, U2X = 0
	UBRR0 = 10;		
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
     4f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UCSR0A |= (1 << U2X0);	
     4f8:	e0 ec       	ldi	r30, 0xC0	; 192
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	82 60       	ori	r24, 0x02	; 2
     500:	80 83       	st	Z, r24
	UCSR0B = (1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0); 	
     502:	88 e9       	ldi	r24, 0x98	; 152
     504:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     508:	08 95       	ret

0000050a <absolute>:
//******************************************************************************

//Get absolute value of a number
//------------------------------------------------------------------------------
int32_t absolute(int32_t in)
{
     50a:	97 ff       	sbrs	r25, 7
     50c:	07 c0       	rjmp	.+14     	; 0x51c <absolute+0x12>
     50e:	90 95       	com	r25
     510:	80 95       	com	r24
     512:	70 95       	com	r23
     514:	61 95       	neg	r22
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	8f 4f       	sbci	r24, 0xFF	; 255
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
  }
  else
  {
    return in;
  }
}
     51c:	08 95       	ret

0000051e <signum>:

//Get sign of a number
//------------------------------------------------------------------------------
int32_t signum(int32_t in)
{
  if(in < 0)
     51e:	97 fd       	sbrc	r25, 7
     520:	0e c0       	rjmp	.+28     	; 0x53e <signum+0x20>
  {
    return -1;
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	67 2b       	or	r22, r23
     52c:	68 2b       	or	r22, r24
     52e:	69 2b       	or	r22, r25
     530:	09 f4       	brne	.+2      	; 0x534 <signum+0x16>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	62 2f       	mov	r22, r18
     536:	75 2f       	mov	r23, r21
     538:	84 2f       	mov	r24, r20
     53a:	93 2f       	mov	r25, r19
     53c:	08 95       	ret
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	7f ef       	ldi	r23, 0xFF	; 255
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
  }
  else
  {
    return 1;
  }
}
     546:	08 95       	ret

00000548 <sqrt>:

//Approximation of square root
//------------------------------------------------------------------------------
uint32_t sqrt(uint32_t val) 
{
     548:	4f 92       	push	r4
     54a:	5f 92       	push	r5
     54c:	6f 92       	push	r6
     54e:	7f 92       	push	r7
     550:	8f 92       	push	r8
     552:	9f 92       	push	r9
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	2f e0       	ldi	r18, 0x0F	; 15
     566:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t temp;
    uint32_t g = 0;
    uint32_t b = 0x8000;
     568:	c1 2c       	mov	r12, r1
     56a:	60 e8       	ldi	r22, 0x80	; 128
     56c:	d6 2e       	mov	r13, r22
     56e:	e1 2c       	mov	r14, r1
     570:	f1 2c       	mov	r15, r1
//Approximation of square root
//------------------------------------------------------------------------------
uint32_t sqrt(uint32_t val) 
{
    uint32_t temp;
    uint32_t g = 0;
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	cb 01       	movw	r24, r22
    uint32_t bshft = 15;
    int32_t  i;
    
    for (i = 0; i < 16; i++) 
    {
      temp = g << 1;
     578:	2b 01       	movw	r4, r22
     57a:	3c 01       	movw	r6, r24
     57c:	44 0c       	add	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	66 1c       	adc	r6, r6
     582:	77 1c       	adc	r7, r7
      temp = temp + b;
     584:	4c 0c       	add	r4, r12
     586:	5d 1c       	adc	r5, r13
     588:	6e 1c       	adc	r6, r14
     58a:	7f 1c       	adc	r7, r15
      temp = temp << bshft;
     58c:	02 2e       	mov	r0, r18
     58e:	04 c0       	rjmp	.+8      	; 0x598 <sqrt+0x50>
     590:	44 0c       	add	r4, r4
     592:	55 1c       	adc	r5, r5
     594:	66 1c       	adc	r6, r6
     596:	77 1c       	adc	r7, r7
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <sqrt+0x48>
      if ( val >= temp)
     59c:	84 14       	cp	r8, r4
     59e:	95 04       	cpc	r9, r5
     5a0:	a6 04       	cpc	r10, r6
     5a2:	b7 04       	cpc	r11, r7
     5a4:	40 f0       	brcs	.+16     	; 0x5b6 <sqrt+0x6e>
      {
        g += b;
     5a6:	6c 0d       	add	r22, r12
     5a8:	7d 1d       	adc	r23, r13
     5aa:	8e 1d       	adc	r24, r14
     5ac:	9f 1d       	adc	r25, r15
        val -= temp;
     5ae:	84 18       	sub	r8, r4
     5b0:	95 08       	sbc	r9, r5
     5b2:	a6 08       	sbc	r10, r6
     5b4:	b7 08       	sbc	r11, r7
      }
      bshft--;
      b = b >> 1;
     5b6:	f6 94       	lsr	r15
     5b8:	e7 94       	ror	r14
     5ba:	d7 94       	ror	r13
     5bc:	c7 94       	ror	r12
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	31 09       	sbc	r19, r1
     5c2:	d0 f6       	brcc	.-76     	; 0x578 <sqrt+0x30>
    }
    
    return g;
}
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	7f 90       	pop	r7
     5d6:	6f 90       	pop	r6
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	08 95       	ret

000005de <swap>:

//Swap to numbers
//------------------------------------------------------------------------------
void swap(uint8_t *x, uint8_t *y) 
{
	uint8_t t = *x; *x = *y; *y = t;
     5de:	fc 01       	movw	r30, r24
     5e0:	20 81       	ld	r18, Z
     5e2:	fb 01       	movw	r30, r22
     5e4:	30 81       	ld	r19, Z
     5e6:	fc 01       	movw	r30, r24
     5e8:	30 83       	st	Z, r19
     5ea:	fb 01       	movw	r30, r22
     5ec:	20 83       	st	Z, r18
     5ee:	08 95       	ret

000005f0 <reverse>:
}

//Reverse a buffer
//------------------------------------------------------------------------------
uint8_t* reverse(uint8_t *buffer, int8_t i, int8_t j)
{
     5f0:	46 0f       	add	r20, r22
     5f2:	24 2f       	mov	r18, r20
     5f4:	26 1b       	sub	r18, r22
	while (i < j)
     5f6:	62 17       	cp	r22, r18
     5f8:	84 f4       	brge	.+32     	; 0x61a <reverse+0x2a>
		swap(&buffer[i++], &buffer[j--]);
     5fa:	fc 01       	movw	r30, r24
     5fc:	e2 0f       	add	r30, r18
     5fe:	f1 1d       	adc	r31, r1
     600:	27 fd       	sbrc	r18, 7
     602:	fa 95       	dec	r31
     604:	dc 01       	movw	r26, r24
     606:	a6 0f       	add	r26, r22
     608:	b1 1d       	adc	r27, r1
     60a:	67 fd       	sbrc	r22, 7
     60c:	ba 95       	dec	r27

//Swap to numbers
//------------------------------------------------------------------------------
void swap(uint8_t *x, uint8_t *y) 
{
	uint8_t t = *x; *x = *y; *y = t;
     60e:	2c 91       	ld	r18, X
     610:	30 81       	ld	r19, Z
     612:	3c 93       	st	X, r19
     614:	20 83       	st	Z, r18
//Reverse a buffer
//------------------------------------------------------------------------------
uint8_t* reverse(uint8_t *buffer, int8_t i, int8_t j)
{
	while (i < j)
		swap(&buffer[i++], &buffer[j--]);
     616:	6f 5f       	subi	r22, 0xFF	; 255
     618:	ec cf       	rjmp	.-40     	; 0x5f2 <reverse+0x2>

	return buffer;
}
     61a:	08 95       	ret

0000061c <itoa>:

//Iterative itoa implementation
//------------------------------------------------------------------------------
uint8_t* itoa(int32_t value, uint8_t* buffer, int8_t base)
{
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	00 d0       	rcall	.+0      	; 0x642 <itoa+0x26>
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	4b 01       	movw	r8, r22
     64a:	5c 01       	movw	r10, r24
     64c:	5b 83       	std	Y+3, r21	; 0x03
     64e:	4a 83       	std	Y+2, r20	; 0x02
     650:	29 83       	std	Y+1, r18	; 0x01
	// invalid input
	if (base < 2 || base > 32)
     652:	82 2f       	mov	r24, r18
     654:	82 50       	subi	r24, 0x02	; 2
     656:	8f 31       	cpi	r24, 0x1F	; 31
     658:	08 f0       	brcs	.+2      	; 0x65c <itoa+0x40>
     65a:	6f c0       	rjmp	.+222    	; 0x73a <itoa+0x11e>
     65c:	75 01       	movw	r14, r10
     65e:	64 01       	movw	r12, r8
     660:	b7 fe       	sbrs	r11, 7
     662:	07 c0       	rjmp	.+14     	; 0x672 <itoa+0x56>
     664:	cc 24       	eor	r12, r12
     666:	dd 24       	eor	r13, r13
     668:	76 01       	movw	r14, r12
     66a:	c8 18       	sub	r12, r8
     66c:	d9 08       	sbc	r13, r9
     66e:	ea 08       	sbc	r14, r10
     670:	fb 08       	sbc	r15, r11
     672:	0a 81       	ldd	r16, Y+2	; 0x02
     674:	1b 81       	ldd	r17, Y+3	; 0x03
     676:	22 24       	eor	r2, r2
     678:	23 94       	inc	r2
     67a:	31 2c       	mov	r3, r1
	int32_t n = absolute(value);

	int16_t i = 0;
	while (n)
	{
		int32_t r = n % base;
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	48 2e       	mov	r4, r24
     680:	88 0f       	add	r24, r24
     682:	55 08       	sbc	r5, r5
     684:	66 08       	sbc	r6, r6
     686:	77 08       	sbc	r7, r7
     688:	a1 01       	movw	r20, r2
     68a:	41 50       	subi	r20, 0x01	; 1
     68c:	51 09       	sbc	r21, r1

	// consider absolute value of number
	int32_t n = absolute(value);

	int16_t i = 0;
	while (n)
     68e:	c1 14       	cp	r12, r1
     690:	d1 04       	cpc	r13, r1
     692:	e1 04       	cpc	r14, r1
     694:	f1 04       	cpc	r15, r1
     696:	e1 f0       	breq	.+56     	; 0x6d0 <itoa+0xb4>
	{
		int32_t r = n % base;
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	a3 01       	movw	r20, r6
     69e:	92 01       	movw	r18, r4
     6a0:	e6 d5       	rcall	.+3020   	; 0x126e <__divmodsi4>

		if (r >= 10) 
     6a2:	6a 30       	cpi	r22, 0x0A	; 10
     6a4:	71 05       	cpc	r23, r1
     6a6:	81 05       	cpc	r24, r1
     6a8:	91 05       	cpc	r25, r1
     6aa:	14 f0       	brlt	.+4      	; 0x6b0 <itoa+0x94>
			buffer[i++] = 65 + (r - 10);
     6ac:	69 5c       	subi	r22, 0xC9	; 201
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <itoa+0x96>
		else
			buffer[i++] = 48 + r;
     6b0:	60 5d       	subi	r22, 0xD0	; 208
     6b2:	f8 01       	movw	r30, r16
     6b4:	60 83       	st	Z, r22

		n = n / base;
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	a3 01       	movw	r20, r6
     6bc:	92 01       	movw	r18, r4
     6be:	d7 d5       	rcall	.+2990   	; 0x126e <__divmodsi4>
     6c0:	69 01       	movw	r12, r18
     6c2:	7a 01       	movw	r14, r20
     6c4:	ff ef       	ldi	r31, 0xFF	; 255
     6c6:	2f 1a       	sub	r2, r31
     6c8:	3f 0a       	sbc	r3, r31
     6ca:	0f 5f       	subi	r16, 0xFF	; 255
     6cc:	1f 4f       	sbci	r17, 0xFF	; 255
     6ce:	dc cf       	rjmp	.-72     	; 0x688 <itoa+0x6c>
	}

	// if number is 0
	if (i == 0)
     6d0:	41 15       	cp	r20, r1
     6d2:	51 05       	cpc	r21, r1
     6d4:	31 f4       	brne	.+12     	; 0x6e2 <itoa+0xc6>
		buffer[i++] = '0';
     6d6:	80 e3       	ldi	r24, 0x30	; 48
     6d8:	ea 81       	ldd	r30, Y+2	; 0x02
     6da:	fb 81       	ldd	r31, Y+3	; 0x03
     6dc:	80 83       	st	Z, r24
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	50 e0       	ldi	r21, 0x00	; 0

	// If base is 10 and value is negative, the resulting string 
	// is preceded with a minus sign (-)
	// With any other base, value is always considered unsigned
	if (value < 0 && base == 10)
     6e2:	b7 fe       	sbrs	r11, 7
     6e4:	0b c0       	rjmp	.+22     	; 0x6fc <itoa+0xe0>
     6e6:	f9 81       	ldd	r31, Y+1	; 0x01
     6e8:	fa 30       	cpi	r31, 0x0A	; 10
     6ea:	41 f4       	brne	.+16     	; 0x6fc <itoa+0xe0>
		buffer[i++] = '-';
     6ec:	ea 81       	ldd	r30, Y+2	; 0x02
     6ee:	fb 81       	ldd	r31, Y+3	; 0x03
     6f0:	e4 0f       	add	r30, r20
     6f2:	f5 1f       	adc	r31, r21
     6f4:	8d e2       	ldi	r24, 0x2D	; 45
     6f6:	80 83       	st	Z, r24
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
     6fa:	5f 4f       	sbci	r21, 0xFF	; 255

	buffer[i] = '\0'; // null terminate string
     6fc:	ea 81       	ldd	r30, Y+2	; 0x02
     6fe:	fb 81       	ldd	r31, Y+3	; 0x03
     700:	e4 0f       	add	r30, r20
     702:	f5 1f       	adc	r31, r21
     704:	10 82       	st	Z, r1

	// reverse the string and return it
	return reverse(buffer, 0, i - 1);
     706:	41 50       	subi	r20, 0x01	; 1
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	7f 90       	pop	r7
     72e:	6f 90       	pop	r6
     730:	5f 90       	pop	r5
     732:	4f 90       	pop	r4
     734:	3f 90       	pop	r3
     736:	2f 90       	pop	r2
		buffer[i++] = '-';

	buffer[i] = '\0'; // null terminate string

	// reverse the string and return it
	return reverse(buffer, 0, i - 1);
     738:	5b cf       	rjmp	.-330    	; 0x5f0 <reverse>
}
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	9b 81       	ldd	r25, Y+3	; 0x03
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	7f 90       	pop	r7
     75e:	6f 90       	pop	r6
     760:	5f 90       	pop	r5
     762:	4f 90       	pop	r4
     764:	3f 90       	pop	r3
     766:	2f 90       	pop	r2
     768:	08 95       	ret

0000076a <char_to_hex>:
//------------------------------------------------------------------------------
void char_to_hex(uint8_t input, uint8_t *outbuf)
{
  #define TO_HEX(i) (i <= 9 ? '0' + i : 'A' - 10 + i)

  outbuf[0] = TO_HEX(((input & 0x00F0) >> 4));
     76a:	98 2f       	mov	r25, r24
     76c:	92 95       	swap	r25
     76e:	9f 70       	andi	r25, 0x0F	; 15
     770:	9a 30       	cpi	r25, 0x0A	; 10
     772:	10 f4       	brcc	.+4      	; 0x778 <char_to_hex+0xe>
     774:	90 5d       	subi	r25, 0xD0	; 208
     776:	01 c0       	rjmp	.+2      	; 0x77a <char_to_hex+0x10>
     778:	99 5c       	subi	r25, 0xC9	; 201
     77a:	fb 01       	movw	r30, r22
     77c:	90 83       	st	Z, r25
     77e:	8f 70       	andi	r24, 0x0F	; 15
  outbuf[1] = TO_HEX((input & 0x000F));
     780:	8a 30       	cpi	r24, 0x0A	; 10
     782:	10 f4       	brcc	.+4      	; 0x788 <char_to_hex+0x1e>
     784:	80 5d       	subi	r24, 0xD0	; 208
     786:	01 c0       	rjmp	.+2      	; 0x78a <char_to_hex+0x20>
     788:	89 5c       	subi	r24, 0xC9	; 201
     78a:	fb 01       	movw	r30, r22
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	08 95       	ret

00000790 <bits_to_bytes>:
}

//Convert a byte to a 0xFF/0x00 byte array for one wire communication
//------------------------------------------------------------------------------
void bits_to_bytes(uint8_t input, uint8_t* outbuf)
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t mask = 0x01;

  for(uint8_t i = 0; i < 8; ++i)
  {
    if (input & (mask << i))
     798:	e1 e0       	ldi	r30, 0x01	; 1
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
    {
      outbuf[i] = 0xFF;
     79e:	af ef       	ldi	r26, 0xFF	; 255
{
  uint8_t mask = 0x01;

  for(uint8_t i = 0; i < 8; ++i)
  {
    if (input & (mask << i))
     7a0:	af 01       	movw	r20, r30
     7a2:	02 2e       	mov	r0, r18
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <bits_to_bytes+0x1a>
     7a6:	44 0f       	add	r20, r20
     7a8:	55 1f       	adc	r21, r21
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <bits_to_bytes+0x16>
     7ae:	48 23       	and	r20, r24
     7b0:	59 23       	and	r21, r25
    {
      outbuf[i] = 0xFF;
     7b2:	eb 01       	movw	r28, r22
{
  uint8_t mask = 0x01;

  for(uint8_t i = 0; i < 8; ++i)
  {
    if (input & (mask << i))
     7b4:	45 2b       	or	r20, r21
     7b6:	11 f0       	breq	.+4      	; 0x7bc <bits_to_bytes+0x2c>
    {
      outbuf[i] = 0xFF;
     7b8:	a8 83       	st	Y, r26
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <bits_to_bytes+0x2e>
    }
    else
    {
      outbuf[i] = 0x00;
     7bc:	18 82       	st	Y, r1
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	6f 5f       	subi	r22, 0xFF	; 255
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255
//------------------------------------------------------------------------------
void bits_to_bytes(uint8_t input, uint8_t* outbuf)
{
  uint8_t mask = 0x01;

  for(uint8_t i = 0; i < 8; ++i)
     7c6:	28 30       	cpi	r18, 0x08	; 8
     7c8:	31 05       	cpc	r19, r1
     7ca:	51 f7       	brne	.-44     	; 0x7a0 <bits_to_bytes+0x10>
    else
    {
      outbuf[i] = 0x00;
    }    
  }
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <bytes_to_bits>:

//Convert a byte array of hex values to one byte for one wire communication
//------------------------------------------------------------------------------
uint8_t bytes_to_bits(uint8_t* inbuf, uint8_t threshold)
{
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t out = 0x00;
     7d8:	80 e0       	ldi	r24, 0x00	; 0

  for (uint8_t i = 0; i < 8; ++i)
  {
    if (inbuf[i] > threshold)
    {
      out = out | (mask << i);
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t out = 0x00;
  uint8_t mask = 0x01;

  for (uint8_t i = 0; i < 8; ++i)
  {
    if (inbuf[i] > threshold)
     7de:	91 91       	ld	r25, Z+
     7e0:	69 17       	cp	r22, r25
     7e2:	38 f4       	brcc	.+14     	; 0x7f2 <bytes_to_bits+0x20>
    {
      out = out | (mask << i);
     7e4:	da 01       	movw	r26, r20
     7e6:	02 2e       	mov	r0, r18
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <bytes_to_bits+0x1a>
     7ea:	aa 0f       	add	r26, r26
     7ec:	0a 94       	dec	r0
     7ee:	ea f7       	brpl	.-6      	; 0x7ea <bytes_to_bits+0x18>
     7f0:	8a 2b       	or	r24, r26
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t bytes_to_bits(uint8_t* inbuf, uint8_t threshold)
{
  uint8_t out = 0x00;
  uint8_t mask = 0x01;

  for (uint8_t i = 0; i < 8; ++i)
     7f6:	28 30       	cpi	r18, 0x08	; 8
     7f8:	31 05       	cpc	r19, r1
     7fa:	89 f7       	brne	.-30     	; 0x7de <bytes_to_bits+0xc>
      out = out | (mask << i);
    }
  }

  return out;
}
     7fc:	08 95       	ret

000007fe <message_parser>:
//******************************************************************************

// parses the message according to its type
//------------------------------------------------------------------------------
void message_parser(uint8_t* message)
{
     7fe:	08 95       	ret

00000800 <message_builder>:

// parses the message according to its type
//------------------------------------------------------------------------------
uint8_t message_builder(Message_t* message, uint8_t id)
{
	if(id == DTU_PING__PACKET_ID)
     800:	61 38       	cpi	r22, 0x81	; 129
     802:	29 f4       	brne	.+10     	; 0x80e <message_builder+0xe>
	{
		message->command = 0x15;
     804:	25 e1       	ldi	r18, 0x15	; 21
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
		//message->rx_address = 0;
		//message->tx_address = 0;
		//message->crc8 = crc8_calc());

		return DTU_PING__PACKET_ID;
     80a:	81 e8       	ldi	r24, 0x81	; 129
     80c:	08 95       	ret
	}
	else if(id == DTU_DATETIME__PACKET_ID)
     80e:	60 38       	cpi	r22, 0x80	; 128
     810:	29 f4       	brne	.+10     	; 0x81c <message_builder+0x1c>
	{
		message->command = 0x15;
     812:	25 e1       	ldi	r18, 0x15	; 21
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18

		return DTU_DATETIME__PACKET_ID;
     818:	80 e8       	ldi	r24, 0x80	; 128
     81a:	08 95       	ret
	}
	else
	{
		return 0;
     81c:	80 e0       	ldi	r24, 0x00	; 0
	}

}
     81e:	08 95       	ret

00000820 <ringbuffer__init>:

//Ringbuffer_State_t ringbuffer__init(Ringbuffer_t *buffer, uint8_t *p_array, uint8_t buf_size, uint8_t buf_width)
//Initializes a buffer with the selected values 
//------------------------------------------------------------------------------
Ringbuffer_State_t ringbuffer__init(Ringbuffer_t *buffer, uint8_t *p_array, uint8_t buf_size, uint8_t buf_width)
{
     820:	fc 01       	movw	r30, r24
  if((buf_width != 1) || (buf_width != 2) || (buf_width != 4))
  {
    buffer->state = BUFFER_empty;  
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
    buffer->write_pos = 0;
     826:	12 82       	std	Z+2, r1	; 0x02
    buffer->read_pos = 0;
     828:	11 82       	std	Z+1, r1	; 0x01
    buffer->busy = 0;
     82a:	15 82       	std	Z+5, r1	; 0x05
    buffer->size = buf_size;
     82c:	43 83       	std	Z+3, r20	; 0x03
    buffer->width = buf_width;
     82e:	24 83       	std	Z+4, r18	; 0x04
    buffer->p_buffer_data = p_array;
     830:	77 83       	std	Z+7, r23	; 0x07
     832:	66 83       	std	Z+6, r22	; 0x06
  { 
    buffer->state = BUFFER_invalid;  
  }

  return buffer->state;
}
     834:	08 95       	ret

00000836 <ringbuffer__push>:
//Ringbuffer_State_t  ringbuffer__push(Ringbuffer_t* buffer, uint8_t* data)
//Pushes an element into a buffer
//Returns state of buffer, Overflow in case buffer is full
//------------------------------------------------------------------------------
Ringbuffer_State_t  ringbuffer__push(Ringbuffer_t* buffer, uint8_t* data)
{   
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
  //Check if buffer is full
  if(buffer->state == BUFFER_full)
     83c:	88 81       	ld	r24, Y
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	11 f1       	breq	.+68     	; 0x886 <ringbuffer__push+0x50>
  {
    return BUFFER_overflow;
  }
  else if(buffer->state == BUFFER_invalid)
     842:	88 23       	and	r24, r24
     844:	09 f1       	breq	.+66     	; 0x888 <ringbuffer__push+0x52>
  {
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	8d 83       	std	Y+5, r24	; 0x05
    memcpy((void *)(&buffer->p_buffer_data[buffer->write_pos * buffer->width]), (void *)data, buffer->width);
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	2e 81       	ldd	r18, Y+6	; 0x06
     850:	3f 81       	ldd	r19, Y+7	; 0x07
     852:	49 2f       	mov	r20, r25
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	89 9f       	mul	r24, r25
     85a:	e0 0d       	add	r30, r0
     85c:	f1 1d       	adc	r31, r1
     85e:	11 24       	eor	r1, r1
     860:	cf 01       	movw	r24, r30
     862:	43 d5       	rcall	.+2694   	; 0x12ea <memcpy>
    buffer->write_pos = (buffer->write_pos + 1) & (buffer->size - 1);
     864:	8a 81       	ldd	r24, Y+2	; 0x02
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	98 0f       	add	r25, r24
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	89 23       	and	r24, r25
     870:	8a 83       	std	Y+2, r24	; 0x02
    
    if(buffer->write_pos == buffer->read_pos)
     872:	99 81       	ldd	r25, Y+1	; 0x01
     874:	89 13       	cpse	r24, r25
     876:	02 c0       	rjmp	.+4      	; 0x87c <ringbuffer__push+0x46>
    {
      buffer->state = BUFFER_full;
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	01 c0       	rjmp	.+2      	; 0x87e <ringbuffer__push+0x48>
    }
    else
    {
      buffer->state = BUFFER_normal;
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	88 83       	st	Y, r24
    }
    
    buffer->busy = 0;
     880:	1d 82       	std	Y+5, r1	; 0x05
           
    return buffer->state;
     882:	88 81       	ld	r24, Y
     884:	01 c0       	rjmp	.+2      	; 0x888 <ringbuffer__push+0x52>
Ringbuffer_State_t  ringbuffer__push(Ringbuffer_t* buffer, uint8_t* data)
{   
  //Check if buffer is full
  if(buffer->state == BUFFER_full)
  {
    return BUFFER_overflow;
     886:	84 e0       	ldi	r24, 0x04	; 4
    
    buffer->busy = 0;
           
    return buffer->state;
  }
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <ringbuffer__pop>:

//Ringbuffer_State_t ringbuffer__pop(Ringbuffer_t *buffer, uint8_t *data)
//Gets an element out of the buffer
//------------------------------------------------------------------------------
Ringbuffer_State_t ringbuffer__pop(Ringbuffer_t *buffer, uint8_t *data)
{  
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
  //Return error if buffer is empty
  if(buffer->state == BUFFER_empty)
     896:	88 81       	ld	r24, Y
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	11 f1       	breq	.+68     	; 0x8e0 <ringbuffer__pop+0x52>
  {
    return BUFFER_underrun;
  }
  else if(buffer->state == BUFFER_invalid)
     89c:	88 23       	and	r24, r24
     89e:	09 f1       	breq	.+66     	; 0x8e2 <ringbuffer__pop+0x54>
     8a0:	9b 01       	movw	r18, r22
  {
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	1d 83       	std	Y+5, r17	; 0x05

    memcpy((void *)data, (void *)(&buffer->p_buffer_data[buffer->read_pos * buffer->width]), buffer->width);
     8a6:	8c 81       	ldd	r24, Y+4	; 0x04
     8a8:	99 81       	ldd	r25, Y+1	; 0x01
     8aa:	48 2f       	mov	r20, r24
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	7f 81       	ldd	r23, Y+7	; 0x07
     8b2:	98 9f       	mul	r25, r24
     8b4:	60 0d       	add	r22, r0
     8b6:	71 1d       	adc	r23, r1
     8b8:	11 24       	eor	r1, r1
     8ba:	c9 01       	movw	r24, r18
     8bc:	16 d5       	rcall	.+2604   	; 0x12ea <memcpy>
    buffer->read_pos = (buffer->read_pos + 1) & (buffer->size - 1);
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	98 0f       	add	r25, r24
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	81 50       	subi	r24, 0x01	; 1
     8c8:	89 23       	and	r24, r25
     8ca:	89 83       	std	Y+1, r24	; 0x01

    //Wenn Leseposition = Schreibposition
    if(buffer->read_pos == buffer->write_pos)
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	89 13       	cpse	r24, r25
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <ringbuffer__pop+0x48>
    {
      //Pufferzustand leer
      buffer->state = BUFFER_empty;
     8d2:	18 83       	st	Y, r17
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <ringbuffer__pop+0x4c>
    }
    //Sonst Pufferzustand normal
    else
    {
      buffer->state = BUFFER_normal;
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	88 83       	st	Y, r24
    }
    
    buffer->busy = 0;
     8da:	1d 82       	std	Y+5, r1	; 0x05

    return buffer->state;
     8dc:	88 81       	ld	r24, Y
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <ringbuffer__pop+0x54>
Ringbuffer_State_t ringbuffer__pop(Ringbuffer_t *buffer, uint8_t *data)
{  
  //Return error if buffer is empty
  if(buffer->state == BUFFER_empty)
  {
    return BUFFER_underrun;
     8e0:	85 e0       	ldi	r24, 0x05	; 5
    
    buffer->busy = 0;

    return buffer->state;
  }  
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	08 95       	ret

000008ea <ringbuffer__flush>:

// Ringbuffer_State_t  ringbuffer__flush(Ringbuffer_t* buffer)
// Clears all items of the buffer
//------------------------------------------------------------------------------
Ringbuffer_State_t ringbuffer__flush(Ringbuffer_t *buffer)
{
     8ea:	fc 01       	movw	r30, r24
  if(buffer->state == BUFFER_invalid)
     8ec:	80 81       	ld	r24, Z
     8ee:	88 23       	and	r24, r24
     8f0:	29 f0       	breq	.+10     	; 0x8fc <ringbuffer__flush+0x12>
    return BUFFER_invalid;
  }
  else
  {
    buffer->busy = 1;
    buffer->write_pos = buffer->read_pos;
     8f2:	81 81       	ldd	r24, Z+1	; 0x01
     8f4:	82 83       	std	Z+2, r24	; 0x02
    buffer->state = BUFFER_empty;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 83       	st	Z, r24
    buffer->busy = 0;
     8fa:	15 82       	std	Z+5, r1	; 0x05

    return buffer->state;
  }
}
     8fc:	08 95       	ret

000008fe <ringbuffer__get_state>:
// returns the state of the ringbuffer
//------------------------------------------------------------------------------
Ringbuffer_State_t  ringbuffer__get_state(Ringbuffer_t* buffer)
{ 
  return buffer->state;
}
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	08 95       	ret

00000904 <ringbuffer__contains>:

// bool ringbuffer__contains_element(Ringbuffer_t, uint8_t * )
// returns true, if the ringbuffer contains the element at least one time
//------------------------------------------------------------------------------
uint8_t ringbuffer__contains(Ringbuffer_t * buffer, void* compare_element)
{
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	fc 01       	movw	r30, r24
     91a:	eb 01       	movw	r28, r22
  uint8_t count = 0;
  uint8_t read_offset = 0;

  //Wenn kein Element vorhanden,
  if ((buffer->state == BUFFER_empty) || (buffer->state == BUFFER_invalid))
     91c:	80 81       	ld	r24, Z
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	08 f4       	brcc	.+2      	; 0x924 <ringbuffer__contains+0x20>
     922:	57 c0       	rjmp	.+174    	; 0x9d2 <ringbuffer__contains+0xce>
  {
    return 0;
  }
  else
  {
    buffer->busy = 1;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	85 83       	std	Z+5, r24	; 0x05

    do
    {
      switch(buffer->width)
     928:	64 81       	ldd	r22, Z+4	; 0x04

        default:
        break;
      }
      
    } while ((++read_offset & (buffer->size - 1)) != buffer->write_pos);
     92a:	23 81       	ldd	r18, Z+3	; 0x03
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	21 50       	subi	r18, 0x01	; 1
     930:	31 09       	sbc	r19, r1
     932:	42 81       	ldd	r20, Z+2	; 0x02
     934:	50 e0       	ldi	r21, 0x00	; 0
// returns true, if the ringbuffer contains the element at least one time
//------------------------------------------------------------------------------
uint8_t ringbuffer__contains(Ringbuffer_t * buffer, void* compare_element)
{
  uint8_t count = 0;
  uint8_t read_offset = 0;
     936:	90 e0       	ldi	r25, 0x00	; 0
// bool ringbuffer__contains_element(Ringbuffer_t, uint8_t * )
// returns true, if the ringbuffer contains the element at least one time
//------------------------------------------------------------------------------
uint8_t ringbuffer__contains(Ringbuffer_t * buffer, void* compare_element)
{
  uint8_t count = 0;
     938:	80 e0       	ldi	r24, 0x00	; 0
  {
    buffer->busy = 1;

    do
    {
      switch(buffer->width)
     93a:	62 30       	cpi	r22, 0x02	; 2
     93c:	81 f0       	breq	.+32     	; 0x95e <ringbuffer__contains+0x5a>
     93e:	64 30       	cpi	r22, 0x04	; 4
     940:	11 f1       	breq	.+68     	; 0x986 <ringbuffer__contains+0x82>
     942:	61 30       	cpi	r22, 0x01	; 1
     944:	d9 f5       	brne	.+118    	; 0x9bc <ringbuffer__contains+0xb8>
      {
        case 1:
          if (*((uint8_t*)compare_element) == *((uint8_t*)(&buffer->p_buffer_data[(buffer->read_pos + read_offset)* buffer->width])))
     946:	71 81       	ldd	r23, Z+1	; 0x01
     948:	a6 81       	ldd	r26, Z+6	; 0x06
     94a:	b7 81       	ldd	r27, Z+7	; 0x07
     94c:	a7 0f       	add	r26, r23
     94e:	b1 1d       	adc	r27, r1
     950:	a9 0f       	add	r26, r25
     952:	b1 1d       	adc	r27, r1
     954:	f8 80       	ld	r15, Y
     956:	7c 91       	ld	r23, X
     958:	f7 12       	cpse	r15, r23
     95a:	30 c0       	rjmp	.+96     	; 0x9bc <ringbuffer__contains+0xb8>
     95c:	2e c0       	rjmp	.+92     	; 0x9ba <ringbuffer__contains+0xb6>
            count++;
          }
          break;

        case 2:
          if (*((uint16_t*)compare_element) == *((uint16_t *)(&buffer->p_buffer_data[(buffer->read_pos + read_offset) * buffer->width])))
     95e:	71 81       	ldd	r23, Z+1	; 0x01
     960:	a9 2f       	mov	r26, r25
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	a7 0f       	add	r26, r23
     966:	b1 1d       	adc	r27, r1
     968:	aa 0f       	add	r26, r26
     96a:	bb 1f       	adc	r27, r27
     96c:	e6 80       	ldd	r14, Z+6	; 0x06
     96e:	f7 80       	ldd	r15, Z+7	; 0x07
     970:	ae 0d       	add	r26, r14
     972:	bf 1d       	adc	r27, r15
     974:	e8 80       	ld	r14, Y
     976:	f9 80       	ldd	r15, Y+1	; 0x01
     978:	0d 90       	ld	r0, X+
     97a:	bc 91       	ld	r27, X
     97c:	a0 2d       	mov	r26, r0
     97e:	ea 16       	cp	r14, r26
     980:	fb 06       	cpc	r15, r27
     982:	e1 f4       	brne	.+56     	; 0x9bc <ringbuffer__contains+0xb8>
     984:	1a c0       	rjmp	.+52     	; 0x9ba <ringbuffer__contains+0xb6>
            count++;
          }
        break;

        case 4:
          if (*((uint32_t*)compare_element) == *((uint32_t *)(&buffer->p_buffer_data[(buffer->read_pos + read_offset) * buffer->width])))
     986:	71 81       	ldd	r23, Z+1	; 0x01
     988:	a9 2f       	mov	r26, r25
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	a7 0f       	add	r26, r23
     98e:	b1 1d       	adc	r27, r1
     990:	aa 0f       	add	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	aa 0f       	add	r26, r26
     996:	bb 1f       	adc	r27, r27
     998:	e6 80       	ldd	r14, Z+6	; 0x06
     99a:	f7 80       	ldd	r15, Z+7	; 0x07
     99c:	ae 0d       	add	r26, r14
     99e:	bf 1d       	adc	r27, r15
     9a0:	88 80       	ld	r8, Y
     9a2:	99 80       	ldd	r9, Y+1	; 0x01
     9a4:	aa 80       	ldd	r10, Y+2	; 0x02
     9a6:	bb 80       	ldd	r11, Y+3	; 0x03
     9a8:	cd 90       	ld	r12, X+
     9aa:	dd 90       	ld	r13, X+
     9ac:	ed 90       	ld	r14, X+
     9ae:	fc 90       	ld	r15, X
     9b0:	8c 14       	cp	r8, r12
     9b2:	9d 04       	cpc	r9, r13
     9b4:	ae 04       	cpc	r10, r14
     9b6:	bf 04       	cpc	r11, r15
     9b8:	09 f4       	brne	.+2      	; 0x9bc <ringbuffer__contains+0xb8>
          {
            count++;
     9ba:	8f 5f       	subi	r24, 0xFF	; 255

        default:
        break;
      }
      
    } while ((++read_offset & (buffer->size - 1)) != buffer->write_pos);
     9bc:	9f 5f       	subi	r25, 0xFF	; 255
     9be:	a9 2f       	mov	r26, r25
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	a2 23       	and	r26, r18
     9c4:	b3 23       	and	r27, r19
     9c6:	a4 17       	cp	r26, r20
     9c8:	b5 07       	cpc	r27, r21
     9ca:	09 f0       	breq	.+2      	; 0x9ce <ringbuffer__contains+0xca>
     9cc:	b6 cf       	rjmp	.-148    	; 0x93a <ringbuffer__contains+0x36>

    buffer->busy = 0;
     9ce:	15 82       	std	Z+5, r1	; 0x05
  }
  
  return count;
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <ringbuffer__contains+0xd0>
  uint8_t read_offset = 0;

  //Wenn kein Element vorhanden,
  if ((buffer->state == BUFFER_empty) || (buffer->state == BUFFER_invalid))
  {
    return 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0

    buffer->busy = 0;
  }
  
  return count;
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	08 95       	ret

000009ea <spi_init>:


void spi_init()
// Initialize pins for spi communication
{
    DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SS)|(1<<DD_SCK));
     9ea:	84 b1       	in	r24, 0x04	; 4
     9ec:	85 7c       	andi	r24, 0xC5	; 197
     9ee:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SS)|(1<<DD_SCK));
     9f0:	84 b1       	in	r24, 0x04	; 4
     9f2:	8a 62       	ori	r24, 0x2A	; 42
     9f4:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
     9f6:	81 e5       	ldi	r24, 0x51	; 81
     9f8:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // Master/Slave select   
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X);              // Double Clock Rate
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8d bd       	out	0x2d, r24	; 45
     9fe:	08 95       	ret

00000a00 <spi_transfer_sync>:
    
}

void spi_transfer_sync (uint8_t * dataout, uint8_t * datain, uint8_t len)
// Shift full array through target device
{
     a00:	36 2f       	mov	r19, r22
       uint8_t i;      
       for (i = 0; i < len; i++) {
     a02:	fb 01       	movw	r30, r22
     a04:	2e 2f       	mov	r18, r30
     a06:	23 1b       	sub	r18, r19
     a08:	24 17       	cp	r18, r20
     a0a:	50 f4       	brcc	.+20     	; 0xa20 <spi_transfer_sync+0x20>
             SPDR = dataout[i];
     a0c:	dc 01       	movw	r26, r24
     a0e:	2d 91       	ld	r18, X+
     a10:	cd 01       	movw	r24, r26
     a12:	2e bd       	out	0x2e, r18	; 46
             while((SPSR & (1<<SPIF))==0);
     a14:	0d b4       	in	r0, 0x2d	; 45
     a16:	07 fe       	sbrs	r0, 7
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <spi_transfer_sync+0x14>
             datain[i] = SPDR;
     a1a:	2e b5       	in	r18, 0x2e	; 46
     a1c:	21 93       	st	Z+, r18
     a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <spi_transfer_sync+0x4>
       }
}
     a20:	08 95       	ret

00000a22 <spi_transmit_sync>:

void spi_transmit_sync (uint8_t * dataout, uint8_t len)
// Shift full array to target device without receiving any byte
{
     a22:	28 2f       	mov	r18, r24
       uint8_t i;      
       for (i = 0; i < len; i++) {
     a24:	fc 01       	movw	r30, r24
     a26:	8e 2f       	mov	r24, r30
     a28:	82 1b       	sub	r24, r18
     a2a:	86 17       	cp	r24, r22
     a2c:	30 f4       	brcc	.+12     	; 0xa3a <spi_transmit_sync+0x18>
             SPDR = dataout[i];
     a2e:	81 91       	ld	r24, Z+
     a30:	8e bd       	out	0x2e, r24	; 46
             while((SPSR & (1<<SPIF))==0);
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <spi_transmit_sync+0x10>
     a38:	f6 cf       	rjmp	.-20     	; 0xa26 <spi_transmit_sync+0x4>
       }
}
     a3a:	08 95       	ret

00000a3c <spi_fast_shift>:

uint8_t spi_fast_shift (uint8_t data)
// Clocks only one byte to target device and returns the received one
{
    SPDR = data;
     a3c:	8e bd       	out	0x2e, r24	; 46
    while((SPSR & (1<<SPIF))==0);
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <spi_fast_shift+0x2>
    return SPDR;
     a44:	8e b5       	in	r24, 0x2e	; 46
}
     a46:	08 95       	ret

00000a48 <state_machine__init>:
// Initialize the state machine and the event ringbuffer
//------------------------------------------------------------------------------

States_t state_machine__init(void)
{
  ringbuffer__init(&ringbuffer_events, ringbuffer_events__data, EVENT_BUFFER_LENGTH, EVENT_BUFFER_WIDTH);
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	40 e2       	ldi	r20, 0x20	; 32
     a4c:	66 ed       	ldi	r22, 0xD6	; 214
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	8e ec       	ldi	r24, 0xCE	; 206
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	e5 de       	rcall	.-566    	; 0x820 <ringbuffer__init>

  //Initialize function pointers
  p_state_machine__state_function[0] = &STATE_error__handler;
     a56:	ec e3       	ldi	r30, 0x3C	; 60
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	85 ea       	ldi	r24, 0xA5	; 165
     a5c:	95 e0       	ldi	r25, 0x05	; 5
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
  p_state_machine__state_function[1] = &STATE_start__handler;
     a62:	87 ea       	ldi	r24, 0xA7	; 167
     a64:	95 e0       	ldi	r25, 0x05	; 5
     a66:	93 83       	std	Z+3, r25	; 0x03
     a68:	82 83       	std	Z+2, r24	; 0x02
  p_state_machine__state_function[2] = &STATE_init__handler;
     a6a:	89 ea       	ldi	r24, 0xA9	; 169
     a6c:	95 e0       	ldi	r25, 0x05	; 5
     a6e:	95 83       	std	Z+5, r25	; 0x05
     a70:	84 83       	std	Z+4, r24	; 0x04
  p_state_machine__state_function[3] = &STATE_receive__handler;
     a72:	8b ea       	ldi	r24, 0xAB	; 171
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	97 83       	std	Z+7, r25	; 0x07
     a78:	86 83       	std	Z+6, r24	; 0x06
  p_state_machine__state_function[4] = &STATE_transmit__handler;
     a7a:	8d ea       	ldi	r24, 0xAD	; 173
     a7c:	95 e0       	ldi	r25, 0x05	; 5
     a7e:	91 87       	std	Z+9, r25	; 0x09
     a80:	80 87       	std	Z+8, r24	; 0x08

  p_state_machine__state_entering_function[0] = &STATE_error__entering_handler;
     a82:	e2 e3       	ldi	r30, 0x32	; 50
     a84:	f1 e0       	ldi	r31, 0x01	; 1
     a86:	8f ea       	ldi	r24, 0xAF	; 175
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
  p_state_machine__state_entering_function[1] = &STATE_start__entering_handler;
     a8e:	80 eb       	ldi	r24, 0xB0	; 176
     a90:	95 e0       	ldi	r25, 0x05	; 5
     a92:	93 83       	std	Z+3, r25	; 0x03
     a94:	82 83       	std	Z+2, r24	; 0x02
  p_state_machine__state_entering_function[2] = &STATE_init__entering_handler;
     a96:	81 eb       	ldi	r24, 0xB1	; 177
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	95 83       	std	Z+5, r25	; 0x05
     a9c:	84 83       	std	Z+4, r24	; 0x04
  p_state_machine__state_entering_function[3] = &STATE_receive__entering_handler;
     a9e:	82 eb       	ldi	r24, 0xB2	; 178
     aa0:	95 e0       	ldi	r25, 0x05	; 5
     aa2:	97 83       	std	Z+7, r25	; 0x07
     aa4:	86 83       	std	Z+6, r24	; 0x06
  p_state_machine__state_entering_function[4] = &STATE_transmit__entering_handler;
     aa6:	83 eb       	ldi	r24, 0xB3	; 179
     aa8:	95 e0       	ldi	r25, 0x05	; 5
     aaa:	91 87       	std	Z+9, r25	; 0x09
     aac:	80 87       	std	Z+8, r24	; 0x08

  state_machine__current_state = STATE_start;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <state_machine__current_state>
  state_machine__initialized = true;
     ab4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <state_machine__initialized>

  return state_machine__current_state;
}
     ab8:	08 95       	ret

00000aba <state_machine__calculate_state>:
//states_t state_machine__calculate_state(events_t event)
//Calculates the new state depending on the input event
//Returns: Next state
//------------------------------------------------------------------------------
States_t state_machine__calculate_state(Events_t event)
{
     aba:	cf 93       	push	r28
  States_t new_state = state_machine__current_state;

  if(!state_machine__initialized)
     abc:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <state_machine__initialized>
     ac0:	99 23       	and	r25, r25
     ac2:	f9 f0       	breq	.+62     	; 0xb02 <state_machine__calculate_state+0x48>
    return STATE_error;
  }
  else
  {
    //Call state function
    new_state = p_state_machine__state_function[(uint8_t)state_machine__current_state](event);
     ac4:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <state_machine__current_state>
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e4 5c       	subi	r30, 0xC4	; 196
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	01 90       	ld	r0, Z+
     ad4:	f0 81       	ld	r31, Z
     ad6:	e0 2d       	mov	r30, r0
     ad8:	09 95       	icall
     ada:	c8 2f       	mov	r28, r24

    //If state has changed, call new state entering function
    if (new_state != state_machine__current_state)
     adc:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <state_machine__current_state>
     ae0:	c8 17       	cp	r28, r24
     ae2:	61 f0       	breq	.+24     	; 0xafc <state_machine__calculate_state+0x42>
    {
      p_state_machine__state_entering_function[(uint8_t)new_state]();
     ae4:	ec 2f       	mov	r30, r28
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	ee 5c       	subi	r30, 0xCE	; 206
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	01 90       	ld	r0, Z+
     af2:	f0 81       	ld	r31, Z
     af4:	e0 2d       	mov	r30, r0
     af6:	09 95       	icall
      state_machine__current_state = new_state;
     af8:	c0 93 f6 01 	sts	0x01F6, r28	; 0x8001f6 <state_machine__current_state>
    }

    return state_machine__current_state;
     afc:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <state_machine__current_state>
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <state_machine__calculate_state+0x4a>
{
  States_t new_state = state_machine__current_state;

  if(!state_machine__initialized)
  {
    return STATE_error;
     b02:	80 e0       	ldi	r24, 0x00	; 0
      state_machine__current_state = new_state;
    }

    return state_machine__current_state;
  }   
}
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <event_push>:

// event_push
// Pushes an event into the ringbuffer
//------------------------------------------------------------------------------
uint8_t event_push(Events_t event)
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	1f 92       	push	r1
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
    Events_t temp_event = event;
     b12:	89 83       	std	Y+1, r24	; 0x01
    Ringbuffer_State_t bufstate = ringbuffer__push(&ringbuffer_events,(uint8_t*)&temp_event);
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	8e ec       	ldi	r24, 0xCE	; 206
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	8b de       	rcall	.-746    	; 0x836 <ringbuffer__push>
     b20:	9e ef       	ldi	r25, 0xFE	; 254
     b22:	98 0f       	add	r25, r24
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	92 30       	cpi	r25, 0x02	; 2
     b28:	08 f0       	brcs	.+2      	; 0xb2c <event_push+0x24>
     b2a:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <event_get>:
// event_get
// Gets an event out of the ringbuffer by reference
//------------------------------------------------------------------------------
uint8_t event_get(Events_t * p_event)
{
    Ringbuffer_State_t bufstate = ringbuffer__pop(&ringbuffer_events, (uint8_t *)p_event);
     b34:	bc 01       	movw	r22, r24
     b36:	8e ec       	ldi	r24, 0xCE	; 206
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	a9 de       	rcall	.-686    	; 0x88e <ringbuffer__pop>
     b3c:	9f ef       	ldi	r25, 0xFF	; 255
     b3e:	98 0f       	add	r25, r24
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	92 30       	cpi	r25, 0x02	; 2
     b44:	08 f0       	brcs	.+2      	; 0xb48 <event_get+0x14>
     b46:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
     b48:	08 95       	ret

00000b4a <STATE_error__handler>:
		default:
			break;
	}
	
	return ret_state;
}	
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	08 95       	ret

00000b4e <STATE_start__handler>:
		default:
			break;
	}
	
	return ret_state;
}	
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	08 95       	ret

00000b52 <STATE_init__handler>:
		default:
			break;
	}
	
	return ret_state;
}
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	08 95       	ret

00000b56 <STATE_receive__handler>:
			break;
	}
	*/
	
	return ret_state;
}	
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	08 95       	ret

00000b5a <STATE_transmit__handler>:
	}

	*/
	
	return ret_state;
}	
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	08 95       	ret

00000b5e <STATE_error__entering_handler>:
     b5e:	08 95       	ret

00000b60 <STATE_start__entering_handler>:
     b60:	08 95       	ret

00000b62 <STATE_init__entering_handler>:
     b62:	08 95       	ret

00000b64 <STATE_receive__entering_handler>:
     b64:	08 95       	ret

00000b66 <STATE_transmit__entering_handler>:
}


//---------------------------------------------------------
void STATE_transmit__entering_handler(void)
{
     b66:	08 95       	ret

00000b68 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	ef 93       	push	r30
     b7a:	ff 93       	push	r31
    unsigned char data;
    unsigned char usr;
    unsigned char lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     b7c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    data = UART0_DATA;
     b80:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     b84:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     b86:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UART_RxHead>
     b8a:	ef 5f       	subi	r30, 0xFF	; 255
     b8c:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     b8e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <UART_RxTail>
     b92:	e2 17       	cp	r30, r18
     b94:	39 f0       	breq	.+14     	; 0xba4 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     b96:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e4 5b       	subi	r30, 0xB4	; 180
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	90 83       	st	Z, r25
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     ba4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   		
     ba6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART_LastRxError>
}
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	2f 91       	pop	r18
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	1f 90       	pop	r1
     bbc:	18 95       	reti

00000bbe <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     bd0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <UART_TxHead>
     bd4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <UART_TxTail>
     bd8:	98 17       	cp	r25, r24
     bda:	69 f0       	breq	.+26     	; 0xbf6 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     bdc:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <UART_TxTail>
     be0:	ef 5f       	subi	r30, 0xFF	; 255
     be2:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
     be4:	e0 93 4a 01 	sts	0x014A, r30	; 0x80014a <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	e4 57       	subi	r30, 0x74	; 116
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	80 81       	ld	r24, Z
     bf0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     bf6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     bfa:	8f 7d       	andi	r24, 0xDF	; 223
     bfc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
    }
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     c12:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <UART_TxHead>
    UART_TxTail = 0;
     c16:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <UART_TxTail>
    UART_RxHead = 0;
     c1a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <UART_RxHead>
    UART_RxTail = 0;
     c1e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_RxTail>
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     c22:	97 ff       	sbrs	r25, 7
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     c26:	22 e0       	ldi	r18, 0x02	; 2
     c28:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
   		baudrate &= ~0x8000;
     c2c:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     c2e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
    UBRR0L = (unsigned char) baudrate;
     c32:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     c36:	88 e9       	ldi	r24, 0x98	; 152
     c38:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
     c42:	08 95       	ret

00000c44 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     c44:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <UART_RxHead>
     c48:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UART_RxTail>
     c4c:	98 17       	cp	r25, r24
     c4e:	91 f0       	breq	.+36     	; 0xc74 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     c50:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <UART_RxTail>
     c54:	ef 5f       	subi	r30, 0xFF	; 255
     c56:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     c58:	e0 93 48 01 	sts	0x0148, r30	; 0x800148 <UART_RxTail>
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e4 5b       	subi	r30, 0xB4	; 180
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
     c64:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <UART_LastRxError>
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	98 2f       	mov	r25, r24
     c6c:	88 27       	eor	r24, r24
     c6e:	82 0f       	add	r24, r18
     c70:	91 1d       	adc	r25, r1
     c72:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     c78:	08 95       	ret

00000c7a <uart_putc>:
**************************************************************************/
void uart_putc(unsigned char data)
{
    unsigned char tmphead;
    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     c7a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <UART_TxHead>
     c7e:	9f 5f       	subi	r25, 0xFF	; 255
     c80:	9f 73       	andi	r25, 0x3F	; 63
    
    while ( tmphead == UART_TxTail ){
     c82:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <UART_TxTail>
     c86:	92 17       	cp	r25, r18
     c88:	e1 f3       	breq	.-8      	; 0xc82 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     c8a:	e9 2f       	mov	r30, r25
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	e4 57       	subi	r30, 0x74	; 116
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     c94:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     c98:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
     ca2:	08 95       	ret

00000ca4 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
    while (*s) 
     caa:	89 91       	ld	r24, Y+
     cac:	88 23       	and	r24, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <uart_puts+0x10>
      uart_putc(*s++);
     cb0:	e4 df       	rcall	.-56     	; 0xc7a <uart_putc>
     cb2:	fb cf       	rjmp	.-10     	; 0xcaa <uart_puts+0x6>

}/* uart_puts */
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     cc0:	84 91       	lpm	r24, Z
     cc2:	ef 01       	movw	r28, r30
     cc4:	21 96       	adiw	r28, 0x01	; 1
     cc6:	88 23       	and	r24, r24
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <uart_puts_p+0x16>
      uart_putc(c);
     cca:	d7 df       	rcall	.-82     	; 0xc7a <uart_putc>
     ccc:	fe 01       	movw	r30, r28
     cce:	f8 cf       	rjmp	.-16     	; 0xcc0 <uart_puts_p+0x6>

}/* uart_puts_p */
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <uart_putc_arr>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc_arr(const char *s, unsigned char length)
{
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	7c 01       	movw	r14, r24
	int i;

    for(i = 0; i < length; ++i)
     ce4:	8c 01       	movw	r16, r24
     ce6:	c6 2f       	mov	r28, r22
     ce8:	d0 e0       	ldi	r29, 0x00	; 0
     cea:	c8 01       	movw	r24, r16
     cec:	8e 19       	sub	r24, r14
     cee:	9f 09       	sbc	r25, r15
     cf0:	8c 17       	cp	r24, r28
     cf2:	9d 07       	cpc	r25, r29
     cf4:	2c f4       	brge	.+10     	; 0xd00 <uart_putc_arr+0x2a>
      uart_putc(*s++);
     cf6:	f8 01       	movw	r30, r16
     cf8:	81 91       	ld	r24, Z+
     cfa:	8f 01       	movw	r16, r30
     cfc:	be df       	rcall	.-132    	; 0xc7a <uart_putc>
     cfe:	f5 cf       	rjmp	.-22     	; 0xcea <uart_putc_arr+0x14>

}/* uart_putc_arr */
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
		if((UART_RxHead & UART_RX_BUFFER_MASK) >= (UART_RxTail & UART_RX_BUFFER_MASK))
     d0e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <UART_RxHead>
     d12:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UART_RxTail>
     d16:	2f 73       	andi	r18, 0x3F	; 63
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	8f 73       	andi	r24, 0x3F	; 63
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	28 17       	cp	r18, r24
     d20:	39 07       	cpc	r19, r25
     d22:	3c f0       	brlt	.+14     	; 0xd32 <uart_available+0x24>
		{
			return (UART_RxHead & UART_RX_BUFFER_MASK) - (UART_RxTail & UART_RX_BUFFER_MASK);
     d24:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <UART_RxHead>
     d28:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <UART_RxTail>
     d2c:	8f 73       	andi	r24, 0x3F	; 63
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	08 c0       	rjmp	.+16     	; 0xd42 <uart_available+0x34>
		}
		else
		{
			return UART_RX_BUFFER_SIZE + (UART_RxHead & UART_RX_BUFFER_MASK) - (UART_RxTail & UART_RX_BUFFER_MASK);
     d32:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <UART_RxHead>
     d36:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <UART_RxTail>
     d3a:	8f 73       	andi	r24, 0x3F	; 63
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	80 5c       	subi	r24, 0xC0	; 192
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	2f 73       	andi	r18, 0x3F	; 63
     d44:	82 1b       	sub	r24, r18
     d46:	91 09       	sbc	r25, r1
		}

        //return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
		
}/* uart_available */
     d48:	08 95       	ret

00000d4a <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
     d4a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UART_RxTail>
     d4e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <UART_RxHead>
     d52:	08 95       	ret

00000d54 <wl_module_init>:
void wl_module_init() 
// Initializes pins and interrupt to communicate with the wl_module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    DDRB |= (1 << CSN);
     d54:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << CE);
     d56:	20 9a       	sbi	0x04, 0	; 4
    wl_module_CE_lo;
     d58:	28 98       	cbi	0x05, 0	; 5
    wl_module_CSN_hi;
     d5a:	2a 9a       	sbi	0x05, 2	; 5

    // Initialize spi module
    spi_init();
     d5c:	46 ce       	rjmp	.-884    	; 0x9ea <spi_init>

00000d5e <wl_module_get_rx_pipe_from_status>:
	return wl_module_get_rx_pipe_from_status(wl_module_get_status());
}

extern uint8_t wl_module_get_rx_pipe_from_status(uint8_t status)
{
	return ((status & 0xE) >> 1);
     d5e:	8e 70       	andi	r24, 0x0E	; 14
}
     d60:	86 95       	lsr	r24
     d62:	08 95       	ret

00000d64 <wl_module_data_ready>:


extern uint8_t wl_module_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     d64:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <PTX>
     d68:	81 11       	cpse	r24, r1
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <wl_module_data_ready+0x14>
    uint8_t status;
    // Read wl_module status 
    wl_module_CSN_lo;                                // Pull down chip select
     d6c:	2a 98       	cbi	0x05, 2	; 5
    status = spi_fast_shift(NOP);               // Read status register
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	65 de       	rcall	.-822    	; 0xa3c <spi_fast_shift>
    wl_module_CSN_hi;                                // Pull up chip select
     d72:	2a 9a       	sbi	0x05, 2	; 5
    return status & (1<<RX_DR);
     d74:	80 74       	andi	r24, 0x40	; 64
     d76:	08 95       	ret


extern uint8_t wl_module_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
     d78:	80 e0       	ldi	r24, 0x00	; 0
    // Read wl_module status 
    wl_module_CSN_lo;                                // Pull down chip select
    status = spi_fast_shift(NOP);               // Read status register
    wl_module_CSN_hi;                                // Pull up chip select
    return status & (1<<RX_DR);
}
     d7a:	08 95       	ret

00000d7c <wl_module_get_one_byte>:

extern uint8_t wl_module_get_one_byte(uint8_t command)
{
uint8_t status;

wl_module_CSN_lo;
     d7c:	2a 98       	cbi	0x05, 2	; 5
status = spi_fast_shift(command);
     d7e:	5e de       	rcall	.-836    	; 0xa3c <spi_fast_shift>
wl_module_CSN_hi;
     d80:	2a 9a       	sbi	0x05, 2	; 5

return status;

}
     d82:	08 95       	ret

00000d84 <wl_module_get_status>:
}

//return the value of the status register
extern uint8_t wl_module_get_status()
{
	return wl_module_get_one_byte(NOP);
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	fa cf       	rjmp	.-12     	; 0xd7c <wl_module_get_one_byte>

00000d88 <wl_module_get_rx_pipe>:
}

//returns the current pipe in the 24L01's STATUS register
extern uint8_t wl_module_get_rx_pipe()
{
	return wl_module_get_rx_pipe_from_status(wl_module_get_status());
     d88:	fd df       	rcall	.-6      	; 0xd84 <wl_module_get_status>
     d8a:	8e 70       	andi	r24, 0x0E	; 14
}
     d8c:	86 95       	lsr	r24
     d8e:	08 95       	ret

00000d90 <wl_module_get_rx_pipe_reading_status>:
}

extern uint8_t wl_module_get_rx_pipe_reading_status()
{
	uint8_t pipe;
	pipe = wl_module_get_one_byte(NOP);
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	f4 df       	rcall	.-24     	; 0xd7c <wl_module_get_one_byte>
	return ((pipe & 0x0E) >> 1);
     d94:	8e 70       	andi	r24, 0x0E	; 14
}
     d96:	86 95       	lsr	r24
     d98:	08 95       	ret

00000d9a <wl_module_get_data>:

}

extern uint8_t wl_module_get_data(uint8_t * data) 
// Reads wl_module_PAYLOAD bytes into data array
{
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
	uint8_t status;
    wl_module_CSN_lo;                               // Pull down chip select
     da2:	2a 98       	cbi	0x05, 2	; 5
    status = spi_fast_shift( R_RX_PAYLOAD );            // Send cmd to read rx payload
     da4:	81 e6       	ldi	r24, 0x61	; 97
     da6:	4a de       	rcall	.-876    	; 0xa3c <spi_fast_shift>
     da8:	18 2f       	mov	r17, r24
    spi_transfer_sync(data,data,wl_module_PAYLOAD); // Read payload
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	be 01       	movw	r22, r28
     dae:	ce 01       	movw	r24, r28
     db0:	27 de       	rcall	.-946    	; 0xa00 <spi_transfer_sync>
    wl_module_CSN_hi;                               // Pull up chip select
     db2:	2a 9a       	sbi	0x05, 2	; 5
    //wl_module_config_register(STATUS,(1<<RX_DR));   // Reset status register
	return status;
}
     db4:	81 2f       	mov	r24, r17
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	08 95       	ret

00000dbe <wl_module_config_register>:


extern uint8_t wl_module_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given wl-module register
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	d6 2f       	mov	r29, r22
	uint8_t status;
	
    wl_module_CSN_lo;
     dc4:	2a 98       	cbi	0x05, 2	; 5
    status = spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
     dc6:	8f 71       	andi	r24, 0x1F	; 31
     dc8:	80 62       	ori	r24, 0x20	; 32
     dca:	38 de       	rcall	.-912    	; 0xa3c <spi_fast_shift>
     dcc:	c8 2f       	mov	r28, r24
    spi_fast_shift(value);
     dce:	8d 2f       	mov	r24, r29
     dd0:	35 de       	rcall	.-918    	; 0xa3c <spi_fast_shift>
    wl_module_CSN_hi;
     dd2:	2a 9a       	sbi	0x05, 2	; 5
	
	return status;
}
     dd4:	8c 2f       	mov	r24, r28
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <wl_module_config>:
void wl_module_config() 
// Sets the important registers in the wl-module and powers the module
// in receiving mode
{
    // Set RF channel
    wl_module_config_register(RF_CH,wl_module_CH);
     ddc:	63 e0       	ldi	r22, 0x03	; 3
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	ee df       	rcall	.-36     	; 0xdbe <wl_module_config_register>
	// Set data speed & Output Power configured in wl_module.h
	wl_module_config_register(RF_SETUP,wl_module_RF_SETUP);
     de2:	66 e0       	ldi	r22, 0x06	; 6
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	eb df       	rcall	.-42     	; 0xdbe <wl_module_config_register>
	// Set length of incoming payload 
    wl_module_config_register(RX_PW_P0, wl_module_PAYLOAD);
     de8:	60 e2       	ldi	r22, 0x20	; 32
     dea:	81 e1       	ldi	r24, 0x11	; 17
     dec:	e8 df       	rcall	.-48     	; 0xdbe <wl_module_config_register>
	
    // Start receiver 
    PTX = 0;        // Start in receiving mode
     dee:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <PTX>
    RX_POWERUP;     // Power up in receiving mode
     df2:	6f e0       	ldi	r22, 0x0F	; 15
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	e3 df       	rcall	.-58     	; 0xdbe <wl_module_config_register>
    wl_module_CE_hi;     // Listening for pakets
     df8:	28 9a       	sbi	0x05, 0	; 5
     dfa:	08 95       	ret

00000dfc <wl_module_read_register>:
    wl_module_CSN_hi;
}*/

void wl_module_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the wl-module registers.
{
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	eb 01       	movw	r28, r22
     e04:	14 2f       	mov	r17, r20
    wl_module_CSN_lo;
     e06:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift(R_REGISTER | (REGISTER_MASK & reg));
     e08:	8f 71       	andi	r24, 0x1F	; 31
     e0a:	18 de       	rcall	.-976    	; 0xa3c <spi_fast_shift>
    spi_transfer_sync(value,value,len);
     e0c:	41 2f       	mov	r20, r17
     e0e:	be 01       	movw	r22, r28
     e10:	ce 01       	movw	r24, r28
     e12:	f6 dd       	rcall	.-1044   	; 0xa00 <spi_transfer_sync>
    wl_module_CSN_hi;
     e14:	2a 9a       	sbi	0x05, 2	; 5
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <wl_module_get_rx_addr>:
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
}

extern void wl_module_get_rx_addr(uint8_t *data, uint8_t rxpipenum, uint8_t len)
{
     e1e:	9c 01       	movw	r18, r24
     e20:	86 2f       	mov	r24, r22
	
	if((rxpipenum > 5))
     e22:	66 30       	cpi	r22, 0x06	; 6
     e24:	18 f4       	brcc	.+6      	; 0xe2c <wl_module_get_rx_addr+0xe>
		return;
		
	wl_module_read_register(RX_ADDR_P0 + rxpipenum, data, len);
     e26:	b9 01       	movw	r22, r18
     e28:	86 5f       	subi	r24, 0xF6	; 246
     e2a:	e8 cf       	rjmp	.-48     	; 0xdfc <wl_module_read_register>
     e2c:	08 95       	ret

00000e2e <wl_module_get_rx_pw>:
//gets the RX payload width on the pipe offset by rxpipenum
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//	specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
extern uint8_t wl_module_get_rx_pw(uint8_t rxpipenum)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	1f 92       	push	r1
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if((rxpipenum > 5))
     e38:	86 30       	cpi	r24, 0x06	; 6
     e3a:	40 f4       	brcc	.+16     	; 0xe4c <wl_module_get_rx_pw+0x1e>
		return 0;
		
	wl_module_read_register(RX_PW_P0 + rxpipenum, &data, 1);
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 5e       	subi	r24, 0xEF	; 239
     e46:	da df       	rcall	.-76     	; 0xdfc <wl_module_read_register>
	
	return data;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <wl_module_get_rx_pw+0x20>
extern uint8_t wl_module_get_rx_pw(uint8_t rxpipenum)
{
	unsigned char data;
	
	if((rxpipenum > 5))
		return 0;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
		
	wl_module_read_register(RX_PW_P0 + rxpipenum, &data, 1);
	
	return data;
}
     e4e:	0f 90       	pop	r0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <wl_module_fifo_tx_empty>:
    return status & (1<<RX_DR);
}

//returns true if TX_EMPTY bit in FIFO_STATUS register is set, false otherwise
extern uint8_t wl_module_fifo_tx_empty()
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	1f 92       	push	r1
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(FIFO_STATUS, &data, 1);
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	be 01       	movw	r22, r28
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	87 e1       	ldi	r24, 0x17	; 23
     e6a:	c8 df       	rcall	.-112    	; 0xdfc <wl_module_read_register>
	
	
	return (data & FIFO_STATUS_TX_EMPTY);
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6e:	80 71       	andi	r24, 0x10	; 16
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <wl_module_fifo_rx_empty>:

//returns true if RX_EMPTY bit in FIFO_STATUS register is set, false otherwise
extern uint8_t wl_module_fifo_rx_empty()
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	1f 92       	push	r1
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(FIFO_STATUS, &data, 1);
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	87 e1       	ldi	r24, 0x17	; 23
     e8c:	b7 df       	rcall	.-146    	; 0xdfc <wl_module_read_register>
	
	return (data & FIFO_STATUS_RX_EMPTY);
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <wl_module_get_rf_ch>:

//returns the current RF channel in RF_CH register
extern uint8_t wl_module_get_rf_ch()
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	1f 92       	push	r1
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(RF_CH, &data, 1);
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	a6 df       	rcall	.-180    	; 0xdfc <wl_module_read_register>
	
	return data;
}
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <wl_module_get_rf_setup>:

//returns the current RF_SETUP Register
extern uint8_t wl_module_get_rf_setup()
{
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	1f 92       	push	r1
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(RF_SETUP, &data, 1);
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	96 df       	rcall	.-212    	; 0xdfc <wl_module_read_register>
	
	return data;
}
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <wl_module_get_plos_cnt>:

//returns the current PLOS_CNT value in OBSERVE_TX register
extern uint8_t wl_module_get_plos_cnt()
{
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	1f 92       	push	r1
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(OBSERVE_TX, &data, 1);
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	be 01       	movw	r22, r28
     ee8:	6f 5f       	subi	r22, 0xFF	; 255
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	86 df       	rcall	.-244    	; 0xdfc <wl_module_read_register>
	
	return ((data & OBSERVE_TX_PLOS_CNT) >> 4);
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef2:	82 95       	swap	r24
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	0f 90       	pop	r0
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <wl_module_get_arc_cnt>:

//returns the current ARC_CNT value in OBSERVE_TX register
extern uint8_t wl_module_get_arc_cnt()
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	1f 92       	push	r1
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	wl_module_read_register(OBSERVE_TX, &data, 1);
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	be 01       	movw	r22, r28
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	74 df       	rcall	.-280    	; 0xdfc <wl_module_read_register>
	
	return (data & OBSERVE_TX_ARC_CNT);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
}
     f16:	8f 70       	andi	r24, 0x0F	; 15
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <wl_module_write_register>:
    wl_module_CSN_hi;
}

void wl_module_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the wl-module registers.
{
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	eb 01       	movw	r28, r22
     f28:	14 2f       	mov	r17, r20
    wl_module_CSN_lo;
     f2a:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift(W_REGISTER | (REGISTER_MASK & reg));
     f2c:	8f 71       	andi	r24, 0x1F	; 31
     f2e:	80 62       	ori	r24, 0x20	; 32
     f30:	85 dd       	rcall	.-1270   	; 0xa3c <spi_fast_shift>
    spi_transmit_sync(value,len);
     f32:	61 2f       	mov	r22, r17
     f34:	ce 01       	movw	r24, r28
     f36:	75 dd       	rcall	.-1302   	; 0xa22 <spi_transmit_sync>
    wl_module_CSN_hi;
     f38:	2a 9a       	sbi	0x05, 2	; 5
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <wl_module_set_tx_addr>:
//unsigned char * address is the actual address to be used.  It should be sized
//	according to the tx_addr length specified to the nrf24l01.
//unsigned int len is the length of the address.  Its value should be specified
//	according to the tx_addr length specified to the nrf24l01.
extern void wl_module_set_tx_addr(uint8_t * address, uint8_t len)
{		
     f42:	46 2f       	mov	r20, r22
	wl_module_write_register(TX_ADDR, address, len);
     f44:	bc 01       	movw	r22, r24
     f46:	80 e1       	ldi	r24, 0x10	; 16
     f48:	eb cf       	rjmp	.-42     	; 0xf20 <wl_module_write_register>

00000f4a <wl_module_set_as_tx>:
//this function takes the existing contents of the CONFIG register and simply
//  clears the PRIM_RX bit in the CONFIG register.
//note: if the read value of the CONFIG register already has the PRIM_RX bit cleared, this 
//  function exits in order to not make an unecessary register write.
extern void wl_module_set_as_tx()
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	1f 92       	push	r1
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	unsigned char config;
	
	wl_module_read_register(CONFIG, &config, 1);
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	be 01       	movw	r22, r28
     f58:	6f 5f       	subi	r22, 0xFF	; 255
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	4e df       	rcall	.-356    	; 0xdfc <wl_module_read_register>
	
	if((config & CONFIG_PRIM_RX) == 0)
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 ff       	sbrs	r24, 0
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <wl_module_set_as_tx+0x2e>
		return;
	
	config &= (~CONFIG_PRIM_RX);
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	89 83       	std	Y+1, r24	; 0x01
	
	wl_module_write_register(CONFIG, &config, 1);
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	be 01       	movw	r22, r28
     f6e:	6f 5f       	subi	r22, 0xFF	; 255
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	d5 df       	rcall	.-86     	; 0xf20 <wl_module_write_register>

	wl_module_CE_lo;
     f76:	28 98       	cbi	0x05, 0	; 5
}
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <wl_module_power_down>:
//this function takes the existing contents of the CONFIG register and simply
//  clears the PWR_UP bit in the CONFIG register.
//note: if the read value of the CONFIG register already has the PWR_UP bit cleared, this 
//  function exits in order to not make an unecessary register write.
extern void wl_module_power_down()
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	1f 92       	push	r1
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	unsigned char config;
	
	wl_module_read_register(CONFIG, &config, 1);
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	be 01       	movw	r22, r28
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	33 df       	rcall	.-410    	; 0xdfc <wl_module_read_register>
	
	if((config & CONFIG_PWR_UP) == 0)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	81 ff       	sbrs	r24, 1
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <wl_module_power_down+0x2e>
		return;
	
	config &= (~CONFIG_PWR_UP);
     f9c:	8d 7f       	andi	r24, 0xFD	; 253
     f9e:	89 83       	std	Y+1, r24	; 0x01
	
	wl_module_write_register(CONFIG, &config, 1);
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	be 01       	movw	r22, r28
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	ba df       	rcall	.-140    	; 0xf20 <wl_module_write_register>

	wl_module_CE_lo;
     fac:	28 98       	cbi	0x05, 0	; 5
}
     fae:	0f 90       	pop	r0
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <wl_module_set_rx_addr>:
//	according to the rx_addr length specified to the nrf24l01.
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//	specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
     fb6:	9c 01       	movw	r18, r24
     fb8:	84 2f       	mov	r24, r20
	if(rxpipenum > 5)
     fba:	46 30       	cpi	r20, 0x06	; 6
     fbc:	20 f4       	brcc	.+8      	; 0xfc6 <wl_module_set_rx_addr+0x10>
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
     fbe:	46 2f       	mov	r20, r22
     fc0:	b9 01       	movw	r22, r18
     fc2:	86 5f       	subi	r24, 0xF6	; 246
     fc4:	ad cf       	rjmp	.-166    	; 0xf20 <wl_module_write_register>
     fc6:	08 95       	ret

00000fc8 <wl_module_rx_config>:
}

extern void wl_module_rx_config() 
// Sets the important registers in the wl-module and powers the module
// in receiving mode
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	00 d0       	rcall	.+0      	; 0xfce <wl_module_rx_config+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <wl_module_rx_config+0x8>
     fd0:	1f 92       	push	r1
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[5];
    // Set RF channel
    wl_module_config_register(RF_CH,wl_module_CH);
     fd6:	63 e0       	ldi	r22, 0x03	; 3
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	f1 de       	rcall	.-542    	; 0xdbe <wl_module_config_register>
	// Set data speed & Output Power configured in wl_module.h
	wl_module_config_register(RF_SETUP,wl_module_RF_SETUP);
     fdc:	66 e0       	ldi	r22, 0x06	; 6
     fde:	86 e0       	ldi	r24, 0x06	; 6
     fe0:	ee de       	rcall	.-548    	; 0xdbe <wl_module_config_register>
	//Enable all RX Data-Pipes
	wl_module_config_register(EN_RXADDR, EN_RXADDR_ERX_ALL);
     fe2:	6f e3       	ldi	r22, 0x3F	; 63
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	eb de       	rcall	.-554    	; 0xdbe <wl_module_config_register>
	//Set RX_Address Pipe 0
	data[0]= data[1]= data[2]= data[3]= data[4]= RX_ADDR_P0_B0_DEFAULT_VAL;
     fe8:	87 ee       	ldi	r24, 0xE7	; 231
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8c 83       	std	Y+4, r24	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
     ff4:	45 e0       	ldi	r20, 0x05	; 5
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	90 df       	rcall	.-224    	; 0xf20 <wl_module_write_register>
	wl_module_config_register(EN_RXADDR, EN_RXADDR_ERX_ALL);
	//Set RX_Address Pipe 0
	data[0]= data[1]= data[2]= data[3]= data[4]= RX_ADDR_P0_B0_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 5, 0);
	//Set RX_Address Pipe 1
	data[0]= data[1]= data[2]= data[3]= data[4]= RX_ADDR_P1_B0_DEFAULT_VAL;
    1000:	82 ec       	ldi	r24, 0xC2	; 194
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	8c 83       	std	Y+4, r24	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
    100c:	45 e0       	ldi	r20, 0x05	; 5
    100e:	be 01       	movw	r22, r28
    1010:	6f 5f       	subi	r22, 0xFF	; 255
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8b e0       	ldi	r24, 0x0B	; 11
    1016:	84 df       	rcall	.-248    	; 0xf20 <wl_module_write_register>
	wl_module_set_rx_addr(data, 5, 0);
	//Set RX_Address Pipe 1
	data[0]= data[1]= data[2]= data[3]= data[4]= RX_ADDR_P1_B0_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 5, 1);
	//Set RX_Address Pipe 2-5
	data[0]=RX_ADDR_P2_DEFAULT_VAL;
    1018:	83 ec       	ldi	r24, 0xC3	; 195
    101a:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	be 01       	movw	r22, r28
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8c e0       	ldi	r24, 0x0C	; 12
    1026:	7c df       	rcall	.-264    	; 0xf20 <wl_module_write_register>
	data[0]= data[1]= data[2]= data[3]= data[4]= RX_ADDR_P1_B0_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 5, 1);
	//Set RX_Address Pipe 2-5
	data[0]=RX_ADDR_P2_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 2);
	data[0]=RX_ADDR_P3_DEFAULT_VAL;
    1028:	84 ec       	ldi	r24, 0xC4	; 196
    102a:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	be 01       	movw	r22, r28
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8d e0       	ldi	r24, 0x0D	; 13
    1036:	74 df       	rcall	.-280    	; 0xf20 <wl_module_write_register>
	//Set RX_Address Pipe 2-5
	data[0]=RX_ADDR_P2_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 2);
	data[0]=RX_ADDR_P3_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 3);
	data[0]=RX_ADDR_P4_DEFAULT_VAL;
    1038:	85 ec       	ldi	r24, 0xC5	; 197
    103a:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	be 01       	movw	r22, r28
    1040:	6f 5f       	subi	r22, 0xFF	; 255
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	8e e0       	ldi	r24, 0x0E	; 14
    1046:	6c df       	rcall	.-296    	; 0xf20 <wl_module_write_register>
	wl_module_set_rx_addr(data, 1, 2);
	data[0]=RX_ADDR_P3_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 3);
	data[0]=RX_ADDR_P4_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 4);
	data[0]=RX_ADDR_P5_DEFAULT_VAL;
    1048:	86 ec       	ldi	r24, 0xC6	; 198
    104a:	89 83       	std	Y+1, r24	; 0x01
extern void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{	
	if(rxpipenum > 5)
		return;
		
	wl_module_write_register(RX_ADDR_P0 + rxpipenum, address, len);
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	be 01       	movw	r22, r28
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f e0       	ldi	r24, 0x0F	; 15
    1056:	64 df       	rcall	.-312    	; 0xf20 <wl_module_write_register>
	data[0]=RX_ADDR_P4_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 4);
	data[0]=RX_ADDR_P5_DEFAULT_VAL;
	wl_module_set_rx_addr(data, 1, 5);
    // Set length of incoming payload 
    wl_module_config_register(RX_PW_P0, wl_module_PAYLOAD);
    1058:	60 e2       	ldi	r22, 0x20	; 32
    105a:	81 e1       	ldi	r24, 0x11	; 17
    105c:	b0 de       	rcall	.-672    	; 0xdbe <wl_module_config_register>
	wl_module_config_register(RX_PW_P1, wl_module_PAYLOAD);
    105e:	60 e2       	ldi	r22, 0x20	; 32
    1060:	82 e1       	ldi	r24, 0x12	; 18
    1062:	ad de       	rcall	.-678    	; 0xdbe <wl_module_config_register>
	wl_module_config_register(RX_PW_P2, wl_module_PAYLOAD);
    1064:	60 e2       	ldi	r22, 0x20	; 32
    1066:	83 e1       	ldi	r24, 0x13	; 19
    1068:	aa de       	rcall	.-684    	; 0xdbe <wl_module_config_register>
	wl_module_config_register(RX_PW_P3, wl_module_PAYLOAD);
    106a:	60 e2       	ldi	r22, 0x20	; 32
    106c:	84 e1       	ldi	r24, 0x14	; 20
    106e:	a7 de       	rcall	.-690    	; 0xdbe <wl_module_config_register>
	wl_module_config_register(RX_PW_P4, wl_module_PAYLOAD);
    1070:	60 e2       	ldi	r22, 0x20	; 32
    1072:	85 e1       	ldi	r24, 0x15	; 21
    1074:	a4 de       	rcall	.-696    	; 0xdbe <wl_module_config_register>
	wl_module_config_register(RX_PW_P5, wl_module_PAYLOAD);
    1076:	60 e2       	ldi	r22, 0x20	; 32
    1078:	86 e1       	ldi	r24, 0x16	; 22
    107a:	a1 de       	rcall	.-702    	; 0xdbe <wl_module_config_register>
	
	
    // Start receiver 
    PTX = 0;        // Start in receiving mode
    107c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <PTX>
    RX_POWERUP;     // Power up in receiving mode
    1080:	6f e0       	ldi	r22, 0x0F	; 15
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	9c de       	rcall	.-712    	; 0xdbe <wl_module_config_register>
    wl_module_CE_hi;     // Listening for pakets
    1086:	28 9a       	sbi	0x05, 0	; 5
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <wl_module_set_rx_pw>:
//  specified, the function does nothing.
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//	specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
extern void wl_module_set_rx_pw(unsigned char payloadwidth, unsigned char rxpipenum)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	1f 92       	push	r1
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	89 83       	std	Y+1, r24	; 0x01
	if((rxpipenum > 5) || (payloadwidth > 32))
    10a4:	66 30       	cpi	r22, 0x06	; 6
    10a6:	48 f4       	brcc	.+18     	; 0x10ba <wl_module_set_rx_pw+0x22>
    10a8:	81 32       	cpi	r24, 0x21	; 33
    10aa:	38 f4       	brcc	.+14     	; 0x10ba <wl_module_set_rx_pw+0x22>
    10ac:	86 2f       	mov	r24, r22
		return;
		
	wl_module_write_register(RX_PW_P0 + rxpipenum, &payloadwidth, 1);
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	be 01       	movw	r22, r28
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 5e       	subi	r24, 0xEF	; 239
    10b8:	33 df       	rcall	.-410    	; 0xf20 <wl_module_write_register>
}
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <wl_module_set_RADDR>:
}

void wl_module_set_RADDR(uint8_t * adr) 
// Sets the receiving address
{
    wl_module_CE_lo;
    10c2:	28 98       	cbi	0x05, 0	; 5
    wl_module_write_register(RX_ADDR_P0,adr,5);
    10c4:	45 e0       	ldi	r20, 0x05	; 5
    10c6:	bc 01       	movw	r22, r24
    10c8:	8a e0       	ldi	r24, 0x0A	; 10
    10ca:	2a df       	rcall	.-428    	; 0xf20 <wl_module_write_register>
    wl_module_CE_hi;
    10cc:	28 9a       	sbi	0x05, 0	; 5
    10ce:	08 95       	ret

000010d0 <wl_module_set_TADDR>:
}

void wl_module_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
    wl_module_write_register(TX_ADDR, adr,5);
    10d0:	45 e0       	ldi	r20, 0x05	; 5
    10d2:	bc 01       	movw	r22, r24
    10d4:	80 e1       	ldi	r24, 0x10	; 16
    10d6:	24 cf       	rjmp	.-440    	; 0xf20 <wl_module_write_register>

000010d8 <wl_module_tx_config>:
// Sets the wl-module as one of the six sender. Define for every sender a unique Number (wl_module_TX_NR_x) 
// when you call this Function.
//  Each TX will get a TX-Address corresponding to the RX-Device.
// RX_Address_Pipe_0 must be the same as the TX-Address
extern void wl_module_tx_config(uint8_t tx_nr) 
{
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <wl_module_tx_config+0x8>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <wl_module_tx_config+0xa>
    10e2:	1f 92       	push	r1
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	18 2f       	mov	r17, r24
	uint8_t tx_addr[5];
	
    // Set RF channel
    wl_module_config_register(RF_CH,wl_module_CH);
    10ea:	63 e0       	ldi	r22, 0x03	; 3
    10ec:	85 e0       	ldi	r24, 0x05	; 5
    10ee:	67 de       	rcall	.-818    	; 0xdbe <wl_module_config_register>
	// Set data speed & Output Power configured in wl_module.h
	wl_module_config_register(RF_SETUP,wl_module_RF_SETUP);
    10f0:	66 e0       	ldi	r22, 0x06	; 6
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	64 de       	rcall	.-824    	; 0xdbe <wl_module_config_register>
	//Config the CONFIG Register (Mask IRQ, CRC, etc)
	wl_module_config_register(CONFIG, wl_module_CONFIG);
    10f6:	6c e0       	ldi	r22, 0x0C	; 12
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	61 de       	rcall	.-830    	; 0xdbe <wl_module_config_register>
    // Set length of incoming payload 
    //wl_module_config_register(RX_PW_P0, wl_module_PAYLOAD);
	
	wl_module_config_register(SETUP_RETR,(SETUP_RETR_ARD_500 | SETUP_RETR_ARC_10));
    10fc:	6a e1       	ldi	r22, 0x1A	; 26
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	5e de       	rcall	.-836    	; 0xdbe <wl_module_config_register>
	
	//set the TX address for the pipe with the same number as the iteration
			switch(tx_nr)			
    1102:	12 30       	cpi	r17, 0x02	; 2
    1104:	c9 f0       	breq	.+50     	; 0x1138 <wl_module_tx_config+0x60>
    1106:	30 f4       	brcc	.+12     	; 0x1114 <wl_module_tx_config+0x3c>
    1108:	11 23       	and	r17, r17
    110a:	81 f0       	breq	.+32     	; 0x112c <wl_module_tx_config+0x54>
    110c:	11 30       	cpi	r17, 0x01	; 1
    110e:	79 f5       	brne	.+94     	; 0x116e <wl_module_tx_config+0x96>
					tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P0_B0_DEFAULT_VAL;
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 1: //setup TX address as default RX address for pipe 1 (C2:C2:C2:C2:C2)
					tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    1110:	82 ec       	ldi	r24, 0xC2	; 194
    1112:	0d c0       	rjmp	.+26     	; 0x112e <wl_module_tx_config+0x56>
    //wl_module_config_register(RX_PW_P0, wl_module_PAYLOAD);
	
	wl_module_config_register(SETUP_RETR,(SETUP_RETR_ARD_500 | SETUP_RETR_ARC_10));
	
	//set the TX address for the pipe with the same number as the iteration
			switch(tx_nr)			
    1114:	14 30       	cpi	r17, 0x04	; 4
    1116:	f1 f0       	breq	.+60     	; 0x1154 <wl_module_tx_config+0x7c>
    1118:	b0 f0       	brcs	.+44     	; 0x1146 <wl_module_tx_config+0x6e>
    111a:	15 30       	cpi	r17, 0x05	; 5
    111c:	41 f5       	brne	.+80     	; 0x116e <wl_module_tx_config+0x96>
					tx_addr[0] = RX_ADDR_P4_DEFAULT_VAL;
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 5: //setup TX address as default RX address for pipe 5 (C2:C2:C2:C2:C6)
					tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    111e:	82 ec       	ldi	r24, 0xC2	; 194
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	8c 83       	std	Y+4, r24	; 0x04
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	8a 83       	std	Y+2, r24	; 0x02
					tx_addr[0] = RX_ADDR_P5_DEFAULT_VAL;
    1128:	86 ec       	ldi	r24, 0xC6	; 198
    112a:	1a c0       	rjmp	.+52     	; 0x1160 <wl_module_tx_config+0x88>
	
	//set the TX address for the pipe with the same number as the iteration
			switch(tx_nr)			
			{
				case 0: //setup TX address as default RX address for pipe 0 (E7:E7:E7:E7:E7)
					tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P0_B0_DEFAULT_VAL;
    112c:	87 ee       	ldi	r24, 0xE7	; 231
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 1: //setup TX address as default RX address for pipe 1 (C2:C2:C2:C2:C2)
					tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	8c 83       	std	Y+4, r24	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <wl_module_tx_config+0x88>
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 2: //setup TX address as default RX address for pipe 2 (C2:C2:C2:C2:C3)
					tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    1138:	82 ec       	ldi	r24, 0xC2	; 194
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	8c 83       	std	Y+4, r24	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	8a 83       	std	Y+2, r24	; 0x02
					tx_addr[0] = RX_ADDR_P2_DEFAULT_VAL;
    1142:	83 ec       	ldi	r24, 0xC3	; 195
    1144:	0d c0       	rjmp	.+26     	; 0x1160 <wl_module_tx_config+0x88>
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 3: //setup TX address as default RX address for pipe 3 (C2:C2:C2:C2:C4)
					tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    1146:	82 ec       	ldi	r24, 0xC2	; 194
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8c 83       	std	Y+4, r24	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02
					tx_addr[0] = RX_ADDR_P3_DEFAULT_VAL;
    1150:	84 ec       	ldi	r24, 0xC4	; 196
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <wl_module_tx_config+0x88>
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 4: //setup TX address as default RX address for pipe 4 (C2:C2:C2:C2:C5)
					tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
    1154:	82 ec       	ldi	r24, 0xC2	; 194
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	8c 83       	std	Y+4, r24	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
					tx_addr[0] = RX_ADDR_P4_DEFAULT_VAL;
    115e:	85 ec       	ldi	r24, 0xC5	; 197
					wl_module_set_TADDR(tx_addr);
					wl_module_set_RADDR(tx_addr);
					break;
				case 5: //setup TX address as default RX address for pipe 5 (C2:C2:C2:C2:C6)
					tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RX_ADDR_P1_B0_DEFAULT_VAL;
					tx_addr[0] = RX_ADDR_P5_DEFAULT_VAL;
    1160:	89 83       	std	Y+1, r24	; 0x01
					wl_module_set_TADDR(tx_addr);
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	b4 df       	rcall	.-152    	; 0x10d0 <wl_module_set_TADDR>
					wl_module_set_RADDR(tx_addr);
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	aa df       	rcall	.-172    	; 0x10c2 <wl_module_set_RADDR>
	
	//PTX =1;
	//TX_POWERUP;
	
    // Start receiver 
    PTX = 0;        // Start in receiving mode
    116e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <PTX>
    RX_POWERUP;     // Power up in receiving mode
    1172:	6f e0       	ldi	r22, 0x0F	; 15
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	23 de       	rcall	.-954    	; 0xdbe <wl_module_config_register>
    wl_module_CE_hi;     // Listening for pakets	
    1178:	28 9a       	sbi	0x05, 0	; 5
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	08 95       	ret

0000118c <wl_module_send>:


void wl_module_send(uint8_t * value, uint8_t len) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	16 2f       	mov	r17, r22
    while (PTX) 
    1196:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <PTX>
    119a:	81 11       	cpse	r24, r1
    119c:	fc cf       	rjmp	.-8      	; 0x1196 <wl_module_send+0xa>
	{}                  // Wait until last paket is send

    wl_module_CE_lo;
    119e:	28 98       	cbi	0x05, 0	; 5

    PTX = 1;                        // Set to transmitter mode
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <PTX>
    TX_POWERUP;                     // Power up
    11a6:	6e e0       	ldi	r22, 0x0E	; 14
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	09 de       	rcall	.-1006   	; 0xdbe <wl_module_config_register>
    
    wl_module_CSN_lo;                    // Pull down chip select
    11ac:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift( FLUSH_TX );     // Write cmd to flush tx fifo
    11ae:	81 ee       	ldi	r24, 0xE1	; 225
    11b0:	45 dc       	rcall	.-1910   	; 0xa3c <spi_fast_shift>
    wl_module_CSN_hi;                    // Pull up chip select
    11b2:	2a 9a       	sbi	0x05, 2	; 5
    
    wl_module_CSN_lo;                    // Pull down chip select
    11b4:	2a 98       	cbi	0x05, 2	; 5
    spi_fast_shift( W_TX_PAYLOAD ); // Write cmd to write payload
    11b6:	80 ea       	ldi	r24, 0xA0	; 160
    11b8:	41 dc       	rcall	.-1918   	; 0xa3c <spi_fast_shift>
    spi_transmit_sync(value,len);   // Write payload
    11ba:	61 2f       	mov	r22, r17
    11bc:	ce 01       	movw	r24, r28
    11be:	31 dc       	rcall	.-1950   	; 0xa22 <spi_transmit_sync>
    wl_module_CSN_hi;                    // Pull up chip select
    11c0:	2a 9a       	sbi	0x05, 2	; 5
    
    wl_module_CE_hi;                     // Start transmission
    11c2:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11c4:	82 e3       	ldi	r24, 0x32	; 50
    11c6:	8a 95       	dec	r24
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <wl_module_send+0x3a>
	_delay_us(15);						// Gr�nes Modul funktioniert nicht mit 10�s delay
	wl_module_CE_lo;
    11ca:	28 98       	cbi	0x05, 0	; 5
}
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	08 95       	ret

000011d4 <main>:

int main(void)
{	
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	6e 97       	sbiw	r28, 0x1e	; 30
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[27] = {0x15,0x72,0x22,0x02,0x00,0x72,0x22,0x02,0x00,0x80,0x0B,0x00,0x62,0x09,0x04,0x97,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF2,0x3D,0xA9};
    11e8:	8b e1       	ldi	r24, 0x1B	; 27
    11ea:	e2 e1       	ldi	r30, 0x12	; 18
    11ec:	f1 e0       	ldi	r31, 0x01	; 1
    11ee:	de 01       	movw	r26, r28
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	01 90       	ld	r0, Z+
    11f4:	0d 92       	st	X+, r0
    11f6:	8a 95       	dec	r24
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <main+0x1e>
	volatile uint8_t crc8_c = 0;
    11fa:	1e 8e       	std	Y+30, r1	; 0x1e
	volatile uint16_t crc16_c = 0;
    11fc:	1d 8e       	std	Y+29, r1	; 0x1d
    11fe:	1c 8e       	std	Y+28, r1	; 0x1c

	hardware_init();
    1200:	5e d9       	rcall	.-3396   	; 0x4be <hardware_init>
	wl_module_init();
    1202:	a8 dd       	rcall	.-1200   	; 0xd54 <wl_module_init>
	state_machine__init();
    1204:	21 dc       	rcall	.-1982   	; 0xa48 <state_machine__init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1206:	2f e9       	ldi	r18, 0x9F	; 159
    1208:	86 e8       	ldi	r24, 0x86	; 134
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	80 40       	sbci	r24, 0x00	; 0
    1210:	90 40       	sbci	r25, 0x00	; 0
    1212:	e1 f7       	brne	.-8      	; 0x120c <main+0x38>
    1214:	00 c0       	rjmp	.+0      	; 0x1216 <main+0x42>
    1216:	00 00       	nop
		
	_delay_ms(50);
	
	sei();
    1218:	78 94       	sei
    121a:	2f e3       	ldi	r18, 0x3F	; 63
    121c:	82 e4       	ldi	r24, 0x42	; 66
    121e:	9f e0       	ldi	r25, 0x0F	; 15
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	80 40       	sbci	r24, 0x00	; 0
    1224:	90 40       	sbci	r25, 0x00	; 0
    1226:	e1 f7       	brne	.-8      	; 0x1220 <main+0x4c>
    1228:	00 c0       	rjmp	.+0      	; 0x122a <main+0x56>
    122a:	00 00       	nop

	while(1)
    {
		_delay_ms(500);
		crc8_c = crc8_calc(buf,26);
    122c:	6a e1       	ldi	r22, 0x1A	; 26
    122e:	ce 01       	movw	r24, r28
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	14 d9       	rcall	.-3544   	; 0x45c <crc8_calc>
    1234:	8e 8f       	std	Y+30, r24	; 0x1e
		crc16_c = crc16_calc(buf+10,14);
    1236:	6e e0       	ldi	r22, 0x0E	; 14
    1238:	ce 01       	movw	r24, r28
    123a:	0b 96       	adiw	r24, 0x0b	; 11
    123c:	2a d9       	rcall	.-3500   	; 0x492 <crc16_calc>
    123e:	9d 8f       	std	Y+29, r25	; 0x1d
    1240:	8c 8f       	std	Y+28, r24	; 0x1c
    1242:	2f e3       	ldi	r18, 0x3F	; 63
    1244:	82 e4       	ldi	r24, 0x42	; 66
    1246:	9f e0       	ldi	r25, 0x0F	; 15
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	80 40       	sbci	r24, 0x00	; 0
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <main+0x74>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <main+0x7e>
    1252:	00 00       	nop
		_delay_ms(500);
		uart_putc(crc8_c);
    1254:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1256:	11 dd       	rcall	.-1502   	; 0xc7a <uart_putc>
		uart_putc(' ');
    1258:	80 e2       	ldi	r24, 0x20	; 32
    125a:	0f dd       	rcall	.-1506   	; 0xc7a <uart_putc>
		uart_putc( ((uint8_t*) &crc16_c)[0]);
    125c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    125e:	0d dd       	rcall	.-1510   	; 0xc7a <uart_putc>
		uart_putc( ((uint8_t*) &crc16_c)[1]);
    1260:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1262:	0b dd       	rcall	.-1514   	; 0xc7a <uart_putc>
		uart_putc('\r');
    1264:	8d e0       	ldi	r24, 0x0D	; 13
    1266:	09 dd       	rcall	.-1518   	; 0xc7a <uart_putc>
		uart_putc('\n');
    1268:	8a e0       	ldi	r24, 0x0A	; 10
    126a:	07 dd       	rcall	.-1522   	; 0xc7a <uart_putc>
    126c:	d6 cf       	rjmp	.-84     	; 0x121a <main+0x46>

0000126e <__divmodsi4>:
    126e:	05 2e       	mov	r0, r21
    1270:	97 fb       	bst	r25, 7
    1272:	16 f4       	brtc	.+4      	; 0x1278 <__divmodsi4+0xa>
    1274:	00 94       	com	r0
    1276:	0f d0       	rcall	.+30     	; 0x1296 <__negsi2>
    1278:	57 fd       	sbrc	r21, 7
    127a:	05 d0       	rcall	.+10     	; 0x1286 <__divmodsi4_neg2>
    127c:	14 d0       	rcall	.+40     	; 0x12a6 <__udivmodsi4>
    127e:	07 fc       	sbrc	r0, 7
    1280:	02 d0       	rcall	.+4      	; 0x1286 <__divmodsi4_neg2>
    1282:	46 f4       	brtc	.+16     	; 0x1294 <__divmodsi4_exit>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__negsi2>

00001286 <__divmodsi4_neg2>:
    1286:	50 95       	com	r21
    1288:	40 95       	com	r20
    128a:	30 95       	com	r19
    128c:	21 95       	neg	r18
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	4f 4f       	sbci	r20, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255

00001294 <__divmodsi4_exit>:
    1294:	08 95       	ret

00001296 <__negsi2>:
    1296:	90 95       	com	r25
    1298:	80 95       	com	r24
    129a:	70 95       	com	r23
    129c:	61 95       	neg	r22
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	08 95       	ret

000012a6 <__udivmodsi4>:
    12a6:	a1 e2       	ldi	r26, 0x21	; 33
    12a8:	1a 2e       	mov	r1, r26
    12aa:	aa 1b       	sub	r26, r26
    12ac:	bb 1b       	sub	r27, r27
    12ae:	fd 01       	movw	r30, r26
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <__udivmodsi4_ep>

000012b2 <__udivmodsi4_loop>:
    12b2:	aa 1f       	adc	r26, r26
    12b4:	bb 1f       	adc	r27, r27
    12b6:	ee 1f       	adc	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	a2 17       	cp	r26, r18
    12bc:	b3 07       	cpc	r27, r19
    12be:	e4 07       	cpc	r30, r20
    12c0:	f5 07       	cpc	r31, r21
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <__udivmodsi4_ep>
    12c4:	a2 1b       	sub	r26, r18
    12c6:	b3 0b       	sbc	r27, r19
    12c8:	e4 0b       	sbc	r30, r20
    12ca:	f5 0b       	sbc	r31, r21

000012cc <__udivmodsi4_ep>:
    12cc:	66 1f       	adc	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	1a 94       	dec	r1
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <__udivmodsi4_loop>
    12d8:	60 95       	com	r22
    12da:	70 95       	com	r23
    12dc:	80 95       	com	r24
    12de:	90 95       	com	r25
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	bd 01       	movw	r22, r26
    12e6:	cf 01       	movw	r24, r30
    12e8:	08 95       	ret

000012ea <memcpy>:
    12ea:	fb 01       	movw	r30, r22
    12ec:	dc 01       	movw	r26, r24
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <memcpy+0xa>
    12f0:	01 90       	ld	r0, Z+
    12f2:	0d 92       	st	X+, r0
    12f4:	41 50       	subi	r20, 0x01	; 1
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	d8 f7       	brcc	.-10     	; 0x12f0 <memcpy+0x6>
    12fa:	08 95       	ret

000012fc <_exit>:
    12fc:	f8 94       	cli

000012fe <__stop_program>:
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <__stop_program>
